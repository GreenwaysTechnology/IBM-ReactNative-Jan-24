				 React fundamentals
.....................................................................................

What is React?

  React is javascript lib for building user interface 
  React is  java script lib like jquery,framework like angular.

What is User interface application?
 
  The user where he interacts , those applications are called user interface applications.

Eg:
  Desktop applications
     if you want to interact with os, shell is primary user interface
     shell in windows, command,powershell,explorer 

  Web Browser:
     It is one of the application software, acts as user interface for web applications
 
 Hand Held devices
  =>Mobile applications
  =>Watch
  =>Tabs
  =>TV
 etc..

.....................................................................................
				Types of web app
.....................................................................................

1.Static Web apps -  1989 to 1995
    built at server end,accessed by clients using browser
    HTML Pages are primary output.

2.Dynamic content web apps - 1996 to till date
    built at server end, access by clients using browser
eg:
  JEE(Servlets,jsp)
  Asp.net
  PHP
 etc.....

3.Web Services -1998 to till
    Data driven apps
     built at server end, accessed by clients  such  as mobiles, client side browser apps.
 SOAP - XML based web service
 RESTFull -  Different format based web service - JSON,XML,PDF....

....................................................................................
			  Client Side Web apps

1.SPA
Single Page Web Apps -  2007 to till date
   built at client side,accessed by clients browsers.
   built using javascript,html 5,css 3 

.....................................................................................
			 React and Web Stack
....................................................................................

React was created to build SPA Web apps by face book at 2013.
"React is modern SPA lib created by face book based on "Flux Design Pattern"
.....................................................................................

Architecture for libs and frameworks:

Plain JS
			 Application(dom) -plain js
			     |
			 Javascript Engine
			      |
			  Browser Engine




Framework/lib
			 Application(JQuery)
			     |
		       ---------------------------
			  JQuery Engine	------javascript programming		
                       -------------------------------
			      |
			 Javascript Engine -C/C++
			      |
			  Browser 

What is jquery engine?
  Jquery engine is also javascript program.


React


		       Application(React)
			     |
		       ---------------------------
	              React Engine :React fiber-->React 16 on wards		
                      ---------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine


React Engine itself is javascript

.....................................................................................
			  React Echo system
....................................................................................

Where is react used? What type of apps u can build using react.

React is every where from building browser based apps , mobile apps,server side web apps.
What ever type of app you build "React core" remains same.

React can be used to build application for 
........................................
1.browsers : Desktop -  Reactjs - SPA
2.Mobile Apps : React Native
3.Server side Apps: "Next.js"

face book is working on many futures projects related to react
4.React VR : Virtual Reality.
5.React Car : For car applications
6.React TV  : React for TV.
7.React IOT : any devices
...................................................................................
			   React core 
..................................................................................
React apps are written using a language called "JSX"

JSX language features are same but its "mark up" syntax would be different.

For Browser JSX markup would be "HTML"
For Mobile JSX markup would be "Mobile Elements"
.....................................................................................
React and Browser:
..................

Project setup:
..............
npx create-react-app my-app

Folder Structure

my-app
 |
 node_modules
 package.json
 package-lock.json
 public 
 src
 readme.md


node_modules
  It is folder contains all libs files and folders downloaded from internet.
  React lib has been downloaded and kept inside this folder only.

package.json
   Every javascript project(it can be any js project), has package.json file  
   This file contains information about the project

Basic information:
 ->Name of the application "name" :"myapp"
 ->version of the application "version": "1.0.0"
 ->dependencies
     libs  required for dev ,testing, production
    you can understand what version of lib is used in the current project
 ->scripts
     scripts contains information about how to start dev server,testing,production build.

public 
  index.html
  This is entry file in react application.
  without this file we cant start the application

src
 |
 index.js
  App.js
 This folder contains application code files.

readme.md
   this is documentation file

how to run the project?
 npm start
....................................................................................
				DOM

java script was created to do DOM programming.

What is DOM?
  IT is spec, for building dynamic html.

According to DOM Spec, every html element is object. called dom object.

<h1> ---inside javascript h1 is object.

We build user interface based on objects, which forms tree called "object tree"- DOM Tree.

HTML Tree
 <div>
    <div>
	<div>
	    <span>This is dom</span>
	</div>
   </div>
 </div>

Object tree or dom tree
   
   div -node-object
    |
    div
     |
     div
      |
      span

In all ui frameworks, like react,angular,vue js the same tree is represented called "Component tree".

What is Component?
   Object which represents an ui element or elements.

In React and React native we create components.
.....................................................................................

Component Creations:
 In React , we use "JSX" language to create compoents.

JSX is more declartive programming.

React = {markup + js}

markup =html for browsers , mobile markup for mobile,tv...

Component = JSX = {markup + js}

How to write first component?
//write first component.
import ReactDOM from "react-dom/client"

//component declaration
const Welcome = <h1>Hello!</h1>

//insert Welcome to into root element
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(Welcome)

How to create Components in react?

We have three patterns.

1.Variable Pattern
2.function pattern
3.ES 6 class Pattern


1.Variable Pattern

//write first component.
import ReactDOM from "react-dom/client"

//variable Pattern
const Welcome = <h1>Hello!</h1>

//insert Welcome to into root element
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(Welcome)


2.functions pattern
import ReactDOM from "react-dom/client"


//es 5 function 
// function Welcome() {
//     //must return jsx code 
//     return <h1>Hello!!</h1>
// }
//es 6 arrow function 
// const Welcome = () => {
//     return <h1>Welcome</h1>
// }
const Welcome = () => <h1>Welcome</h1>


const rootElement = ReactDOM.createRoot(document.getElementById('root'))

//imperative way:
// rootElement.render(Welcome())
//declarative syntax:
// rootElement.render(<Welcome></Welcome>)
rootElement.render(<Welcome />)

classes:
 Note: classes are not recommended,only functional components are recommended.
we will dicuss why functional components are good.

import ReactDOM from "react-dom/client"
import React from "react"

class Welcome extends React.Component {
    //override method called "render" where we can write jsx code 
    render() {
        return <h1>Welcome!!</h1>
    }
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<Welcome />)
.....................................................................................
...................................................................................
			  JSX


JSX - Javascript and XML

What is JSX?
 JSX is dsl language to create user interfaces

What is relationship with XML?

 Inside JSX , we write javascript code and HTML code only not xml code.

Why the term XML is used?

 When we write JSX code, we need stable mark up standards.

You know very well HTML has weak parser  that means 
 <h1>hello
when run the code , the html parser does not stop rendering hello, it never throws any error.

in order to avoid instability code inside jsx during compilation, JSX team adopted XML Parser rules, since XML parser has strong parser

Basic XML  rules:

1.every opened element must be closed
  <h1>Hello</h1>
  <Welcome></Welcome>
 some elements may not have closing tag
  <img /> : image element has no child elements : self closing. 


import ReactDOM from "react-dom/client"
import React from "react"

const Welcome = () => {
    return <h1>Hello
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<Welcome />)

2. In xml you must have one single root element.
  all elements must be organized under single root element.

 <h1>Welcome to React</h1>
 <p>Path finder</p>
 <h1>Welcome to React</h1>
 <p>Path finder</p>

In html what can be root element
 <div>,<span>,all html 5 layout elements header,footer,section,aside...

import ReactDOM from "react-dom/client"
import React from "react"

// const Welcome = () => {
//     return <h1>Hello</h1>
//             <span>test</span>
// }

const Welcome = () => {
    return <div>
        <h1>Hello</h1>
        <span>test</span>
    </div>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<Welcome />)
.....................................................................................
			  Fragment
....................................................................................
Note: some times i dont want root element, but how to avoid compiler errors
React uses a feature called "React fragements" using fragements you can avoid error..

React Fragement Syntax:

<React.Fragement><React.Fragement>
<Fragement></Fragement>
<></>



Using Framegments:
import ReactDOM from "react-dom/client"
// import React, { Fragment } from "react"

// const Welcome = () => {
//     return <div>
//         <h1>Hello</h1>
//         <span>test</span>
//     </div>
// }
// const Welcome = () => {
//     return <React.Fragment>
//         <h1>Hello</h1>
//         <span>test</span>
//     </React.Fragment>
// }
// const Welcome = () => {
//     return <Fragment>
//         <h1>Hello</h1>
//         <span>test</span>
//     </Fragment>
// }
const Welcome = () => {
    return <>
        <h1>Hello</h1>
        <span>test</span>
    </>
}


const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<Welcome />)



3.Component names should start with Uppercase,generally would be noun.

import ReactDOM from "react-dom/client"

const welcome = () => {
    return <>
        <h1>Hello</h1>
        <span>test</span>
    </>
}


const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<welcome />)

Warning: The tag <welcome> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.
    at welcome
printWarning @ react-dom.development.js:86
.....................................................................................

.....................................................................................
			How jsx code gets compiled?

How code gets compiled?

source code: jsx code

function Welcome() {
      return <h1>Welcome To React!</h1>;
}
|
babel.js - compiler 

compiled code

function Welcome() {
  return React.createElement(
    'h1',
    null,
    'Welcome To React!'
  );
}
|
runtime : react engine

function Welcome() {
  return React.createElement(
    'h1',
    null,
    'Welcome To React!'
  );
}
|
//React.createElement
function createElement(args){
   document.createElement(args); // low level api call
}
...............
....................................................................................
			Component tree - Component Composition
...................................................................................

How to break large ui into smaller and smallar.

Why we need to create components?
 -Resuablity

DRY

How to create Component tree?

Lets look at the below markup and start thinking in the terms of components...

Blog

import ReactDOM from "react-dom/client"

//Blog Header:
const BlogHeader = () => <h1>My First Component</h1>

const BlogListItems = () => <>
    <li>Components are building blocks</li>
    <li>Components helps to reuse</li>
    <li>Components helps to scale ui</li>
</>

const BlogList = () => <ol>
    <BlogListItems />
</ol>

const Blog = () => {
    return <article>
        <BlogHeader />
        <BlogList />
    </article>
}

const App = () => <>
    <Blog />
    <Blog />
    <Blog />
    <Blog />
</>

const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)

...................................................................................
			  Modularzation and Project layout
.....................................................................................

It means to spilt code,and to keep inside folders and files

Is there a recommended way to structure React projects?

React doesn’t have opinions on how you put files into folders. That said there are a few common approaches popular in the ecosystem you may want to consider.

1.Grouping by features or routes - This is recommended
2.Grouping by file types -  This is not recommended for large 
projects


common/
  Avatar.js
  Avatar.css
  APIUtils.js
  APIUtils.test.js
feed/
  index.js
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  FeedAPI.js
profile/
  index.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css
  ProfileAPI.js


profile,feed,customers,products,payments which are "features"

Grouping by file type

api/
  APIUtils.js
  APIUtils.test.js
  ProfileAPI.js
  UserAPI.js
components/
  Avatar.js
  Avatar.css
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css

.....................................................................................

Inside folders we can save file as "Blog.js or Blog.jsx or Blog.tsx"

Recommened as ".jsx or tsx"

jsx or tsx represents the files are component files.

jsx means js projects
tsx means ts projects.

Root files can't be saved as "jsx" -  index.js and App.js

Eg:

src/App.js
import { Blog } from "./blog/Blog";

const App = () => <>
    <Blog />
</>
export default App;

src/index.js

import ReactDOM from "react-dom/client"
import App from "./App"

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)
const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)

src/blog/Blog.jsx
import { BlogHeader } from "./BlogHeader"
import { BlogList } from "./BlogList"

export const Blog = () => {
    return <article>
        <BlogHeader />
        <BlogList/>
    </article>
}

src/blog/BlogHeader.jsx

export const BlogHeader = () => <h1>My First Component</h1>

src/blog/BlogList.jsx

import { BlogListItems } from "./BlogListItem"

export const BlogList = () => <ol>
    <BlogListItems />
</ol>

src/blog/BlogListItems.jsx

export const BlogListItems = () => <>
    <li>Components are building blocks</li>
    <li>Components helps to reuse</li>
    <li>Components helps to scale ui</li>
</>

In order to see the tree model, we can use react dev tool

https://react.dev/learn/react-developer-tools..

Assignment -1:

Build Layouts based on compoenent composition

 App
  |
 Page
   Header
     ->Logo
     ->SearchBar
   Body 
     ->Have three blogs
   Footer
     ->Copyright
....................................................................................
			  Dynamic Page -  data binding
.....................................................................................
Types of app
1.static app
  only markup-html , hand coded.
2.dynamic app
   markup +data

How to add data in the component or How to bind data in the compoent?

Data can be represented many ways

1.primitives - numbers,strings,booleans
2.objects - literals
3.collections - arrays 

let | const variableName ='value'

{variableName}-data binding

data binding can be 
{variable}
{expression} - {10*10} - {getValue()} {emp.id}


eg:
import ReactDOM from "react-dom/client"

//dynamic ui = {markup + data}

const Welcome = () => {
    let name = 'Subramanian Murugan'
    let age = 18
    let status = true
    let address = {
        city: 'Coimbatore'
    }
    let skills = ["javascript", "java", "react", "react native", "microservices"]
    return <>
        <h1>Your name is {name}</h1>
        <h1>Your age is {age}</h1>
        <h1>Your Status is {status ? "Available" : "Not Available"}</h1>
        <h1>Your City is {address.city}</h1>
        <h2>Your skills</h2>
        <ol>
            {
                skills.map(skill => {
                    return <li>{skill}</li>
                })
            }
        </ol>
    </>
}


const App = () => {
    return <Welcome />
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)


In the above example we have declared variables and bound with markup, which is not right way to delcare data and bind.
.....................................................................................
			 Data binding patterns
.....................................................................................


Data can be bound to component in two ways

1.data is supplied from the outside the compoent
2.data is encapsulated with in the component


1.data is supplied from the outside the component
  When component receives data from  the outside, this pattern is called as "Property Pattern or Props Pattern".

Outside component means what? what is outside for the component?

You know very well, react creates components and assembles them in tree model, the one component is called parent compoent and other component is child component , some other compoents are called as sibilings.

outside means parent.

Data is supplied from the parent compoent to child component - props pattern

Basic Property Syntax:
import ReactDOM from "react-dom/client"

// const Profile = (id, name) => {

//     return <div>
//         <h1>Profile Details</h1>
//         <h2>Id : {id}</h2>
//         <h2>Name :{name}</h2>
//     </div>
// }

//abc =  object  - > {id:1,name:'Subramanian'}
//abc is property or props
// const Profile = (abc) => {
//     return <div>
//         <h1>Profile Details</h1>
//         <h2>Id : {abc.id}</h2>
//         <h2>Name :{abc.name}</h2>
//     </div>
// }
const Profile = (props) => {
    console.log(props)
    return <div>
        <h1>Profile Details</h1>
        <h2>Id : {props.id}</h2>
        <h2>Name :{props.name}</h2>
        <h2>Status : {props.status ? "Available" : "Not Available"}</h2>
        <h2>Age : {props.age}</h2>
        <address>
            <p>city: {props.address.city}</p>
        </address>
        <ol>
            {
                props.skills.map(skill => {
                    return <li>{skill}</li>
                })
            }
        </ol>
    </div>
}
const App = () => {
    // return Profile(1, 'Subramanian Murugan')
    let age = 18
    let status = true
    let address = {
        city: 'Coimbatore'
    }
    let skills = ["javascript", "java", "react", "react native", "microservices"]

    return <Profile id={1} name="Subramaian Murugan" age={age} status={status} address={address} skills={skills} />
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)
...................................................................................
			Why Props
...................................................................................
Props helps components/widgets for configuration.


I am going to create Configurable Profile Component, so that i can supply different types of profile data.

import ReactDOM from "react-dom/client"

const Profile = (props) => {
    return <div>
        <h1>Profile Details</h1>
        <h2>Id : {props.id}</h2>
        <h2>Name :{props.name}</h2>
        <h2>Status : {props.status ? "Available" : "Not Available"}</h2>
        <h2>Age : {props.age}</h2>
        <address>
            <p>city: {props.address.city}</p>
        </address>
        <ol>
            {
                props.skills.map(skill => {
                    return <li>{skill}</li>
                })
            }
        </ol>
    </div>
}
const App = () => {
    return <>
        <Profile id={1} name="Subramaian Murugan" age={18} status={true} address={{ city: 'Coimbatore' }} skills={["react", "java"]} />
        <Profile id={2} name="Murugan" age={34} status={false} address={{ city: 'Delhi' }} skills={["microservices", "node js"]} />
        <Profile id={3} name="Ram" age={34} status={true} address={{ city: 'Pune' }} skills={["microservices", "node js"]} />
    </>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)


List of Profiles:
import ReactDOM from "react-dom/client"
import { PROFILES } from "./mock-data/profile"

const Profile = (props) => {
    return <div>
        <h1>Profile Details</h1>
        <h2>Id : {props.id}</h2>
        <h2>Name :{props.name}</h2>
        <h2>Status : {props.status ? "Available" : "Not Available"}</h2>
        <h2>Age : {props.age}</h2>
        <address>
            <p>city: {props.address.city}</p>
        </address>
        <ol>
            {
                props.skills.map(skill => {
                    return <li>{skill}</li>
                })
            }
        </ol>
    </div>
}
const App = () => {
    return <>
        {
            PROFILES.map(profile => {
                return <Profile id={profile.id} name={profile.name} status={profile.status} address={profile.address} skills={profile.skills} />
            })
        }
    </>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)

export const PROFILES = [
    {
        id: 1,
        name: 'Subramanian',
        status: true,
        address: {
            city: 'Coimbatore'
        },
        skills: ["react", "java"]
    },
    {
        id: 2,
        name: 'Murugan',
        status: false,
        address: {
            city: 'Delhi'
        },
        skills: ["Python", "Flask"]
    },
    {
        id: 3,
        name: 'Ram',
        status: true,
        address: {
            city: 'Banaglore'
        },
        skills: ["Microservices", "Java", "React", "Node"]
    }
]
.....................................................................................
			Breaking component and passing data
.....................................................................................

import ReactDOM from "react-dom/client"
import { PROFILES } from "./mock-data/profile"

const Address = props => {
    return <address>
        <p>city: {props.address.city}</p>
    </address>
}
const SkillsList = props => {
    return <ol>
        {
            props.skills.map(skill => {
                return <SkillsListItems skill={skill} />
            })
        }
    </ol>
}
const SkillsListItems = props => {
    return <li>{props.skill}</li>
}
const Profile = props => {
    return <div>
        <h1>Profile Details</h1>
        <h2>Id : {props.id}</h2>
        <h2>Name :{props.name}</h2>
        <h2>Status : {props.status ? "Available" : "Not Available"}</h2>
        <h2>Age : {props.age}</h2>
        <Address address={props.address} />
        <SkillsList skills={props.skills} />
    </div>
}
const App = () => {
    return <>
        {
            PROFILES.map(profile => {
                return <Profile id={profile.id} age={profile.age} name={profile.name} status={profile.status} address={profile.address} skills={profile.skills} />
            })
        }
    </>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)

.....................................................................................
			Property Spread Operator

import ReactDOM from "react-dom/client"
import { PROFILES } from "./mock-data/profile"

const Address = props => {
    return <address>
        <p>city: {props.address.city}</p>
    </address>
}
const SkillsList = props => {
    return <ol>
        {
            props.skills.map(skill => {
                return <SkillsListItems skill={skill} />
            })
        }
    </ol>
}
const SkillsListItems = props => {
    return <li>{props.skill}</li>
}
const ProfileMaster = props => {
    //what if i want to pass all properties from this component to another component.
    // return <ProfileDetails id={props.id} name={props.name} status={props.status} age={props.age} address={props.address} skills={props.skills} />
    //in order to send all data we can use short cut: spread operator.
    return <ProfileDetails {...props} title="Profile Details" />
}

const ProfileDetails = props => {
    return <div>
        <h1>{props.title}</h1>
        <h2>Id : {props.id}</h2>
        <h2>Name :{props.name}</h2>
        <h2>Status : {props.status ? "Available" : "Not Available"}</h2>
        <h2>Age : {props.age}</h2>
        <Address address={props.address} />
        <SkillsList skills={props.skills} />
    </div>
}
const App = () => {
    return <>
        {
            PROFILES.map(profile => {
                return <ProfileMaster id={profile.id} age={profile.age} name={profile.name} status={profile.status} address={profile.address} skills={profile.skills} />
            })
        }
    </>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)
.....................................................................................
			Object Destructuring And Props
.....................................................................................
import ReactDOM from "react-dom/client"
import { PROFILES } from "./mock-data/profile"

const Address = ({ address: { city } }) => <address>
    <p>city: {city}</p>
</address>

const SkillsList = ({ skills }) => <ol>{
    skills.map(skill => <SkillsListItems skill={skill} />)
}</ol>

const SkillsListItems = ({ skill }) => <li>{skill}</li>

const ProfileMaster = props => <ProfileDetails {...props} title="Profile Details" />

const ProfileDetails = props => {
    const { id, name, status, age, address, skills, title } = props
    return <div>
        <h1>{title}</h1>
        <h2>Id : {id}</h2>
        <h2>Name :{name}</h2>
        <h2>Status : {status ? "Available" : "Not Available"}</h2>
        <h2>Age : {age}</h2>
        <Address address={address} />
        <SkillsList skills={skills} />
    </div>
}
const App = () => <>
    {
        PROFILES.map(profile => {
            return <ProfileMaster id={profile.id} age={profile.age} name={profile.name} status={profile.status} address={profile.address} skills={profile.skills} />
        })
    }
</>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)
.....................................................................................
			Default Props
.....................................................................................
import ReactDOM from "react-dom/client"

const Profile = (props) => {
    return <div>
        <h1>Profile Details</h1>
        <h2>Id : {props.id}</h2>
        <h2>Name :{props.name}</h2>
        <h2>Status : {props.status ? "Available" : "Not Available"}</h2>
        <h2>Age : {props.age}</h2>
        <address>
            <p>city: {props.address.city}</p>
        </address>
        <ol>
            {
                props.skills.map(skill => {
                    return <li>{skill}</li>
                })
            }
        </ol>
    </div>
}

//Default Props are props which are supplied when a property is not supplied.
Profile.defaultProps = {
    id: 0,
    name: 'Name',
    age: 18,
    status: false,
    address: {
        city: 'New York'
    },
    skills: ['skill1', 'skill2']
}



const App = () => {
    return <>
        <Profile id={1} name="Subramaian Murugan" age={18} status={true} address={{ city: 'Coimbatore' }} skills={["react", "java"]} />
        <Profile id={2} name="Murugan" age={34} address={{ city: 'Delhi' }} skills={["microservices", "node js"]} />
        <Profile />
    </>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)
.....................................................................................
			class components and props.
.....................................................................................

import React from "react"
import ReactDOM from "react-dom/client"

class Profile extends React.Component {

    render() {
        return <div>
            <h1>Profile Details</h1>
            <h2>Id : {this.props.id}</h2>
            <h2>Name :{this.props.name}</h2>
            <h2>Status : {this.props.status ? "Available" : "Not Available"}</h2>
            <h2>Age : {this.props.age}</h2>
            <address>
                <p>city: {this.props.address.city}</p>
            </address>
            <ol>
                {
                    this.props.skills.map(skill => {
                        return <li>{skill}</li>
                    })
                }
            </ol>
        </div>
    }

}

//Default Props are props which are supplied when a property is not supplied.
Profile.defaultProps = {
    id: 0,
    name: 'Name',
    age: 18,
    status: false,
    address: {
        city: 'New York'
    },
    skills: ['skill1', 'skill2']
}



const App = () => {
    return <>
        <Profile id={1} name="Subramaian Murugan" age={18} status={true} address={{ city: 'Coimbatore' }} skills={["react", "java"]} />
        <Profile id={2} name="Murugan" age={34} address={{ city: 'Delhi' }} skills={["microservices", "node js"]} />
        <Profile />
    </>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)
....................................................................................
			 What can be a prop
....................................................................................

Prop can be 
1.data - numbers,strings,objects,arrays,boolean
2.function- function as prop
3.component/html elment can be prop

Component as Prop:

<Header/> -  This component no child
<Header> ? </Header> -This component has child..

import React from "react"
import ReactDOM from "react-dom/client"
import logo from './logo.svg';

//Component as Prop 

const Header = props=> {
    return <>
        {props.children}
    </>
}

const Logo = props=>{
    return <>
        <img alt="logo" src={logo} width={100} height={100} />
    </>
}

const App = () => {
    return <>
        {/* <Header/> */}
        <Header>
            <h1>IBM</h1>
            <Logo />
        </Header>
    </>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)
.....................................................................................
.....................................................................................
			State Pattern
....................................................................................

What is state?
  Data is encapsulated inside compoent and we can change that data, when ever the data is changed, userinterface will re render....

How to declare state inside component?

=>inside class component - Until react 16...
=>Inside functions using Hooks - Recommended...

How to interact with UI ?
  Event Handling.

How to mutate(update) state?
  functional programming principls - pure functions and immutablity...


state declaration inside class compoent:
........................................

1.there is instance variable from React.Component base class called "state"
2.we need to declare that state variable inside our compoent class
3.state variable must hold always object
4.Object contains component data.

import React from "react"
import ReactDOM from "react-dom/client"

//state mutation inside class component

class Review extends React.Component {

    //state declaration
    state = {
        like: 0,
        dislike: 0
    }

    render() {
        console.log(this.state)
        return <div>
            <h1>Review App</h1>
            <h3>Like {this.state.like}  Dislike  {this.state.dislike}</h3>
        </div>
    }
}

const App = () => {
    return <>
        <Review />
    </>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)


How to change like and dislike variables?

Event Handling:
import React from "react"
import ReactDOM from "react-dom/client"

//state mutation inside class component

class Review extends React.Component {

    //state declaration
    state = {
        like: 0,
        dislike: 0
    }
    //event handler : as an arrow function 
    onLike = () => {
        console.log('onLike')
    }
    render() {
        console.log(this.state)
        return <div>
            <h1>Review App</h1>
            <h3>Like {this.state.like}  Dislike  {this.state.dislike}</h3>
            <button onClick={this.onLike}>Like</button>
            <button>Dislike</button>

        </div>
    }
}

const App = () => {
    return <>
        <Review />
    </>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)
.....................................................................................
How React updates User interface?


via render method.
render:

=>render method is called by "react engine".

Can we call render method directly inside event listener...
Yes, but no impact on ui update...
   onLike = () => {
        this.state.like++
        console.log(this.state.like)
        this.render()
        console.log('onLike is clicked')
    }
Note: render should be not called directly in order to update user interface..


import React from "react"
import ReactDOM from "react-dom/client"

//state mutation inside class component

class Review extends React.Component {

    //state declaration
    state = {
        like: 0,
        dislike: 0
    }
    //event handler : as an arrow function 
    onLike = () => {
        console.log('onLike')
        //increment 
        this.state.like++
        console.log(this.state.like)
        this.render()
    }
    render() {
        console.log(this.state)
        return <div>
            <h1>Review App</h1>
            <h3>Like {this.state.like}  Dislike  {this.state.dislike}</h3>
            <button onClick={this.onLike}>Like</button>
            <button>Dislike</button>
        </div>
    }
}

const App = () => {
    return <>
        <Review />
    </>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)


...................................................................................
			functional programming principles and React
...................................................................................

Pure Functions:

Pure functions are defined by two rules..

Rule A:
  if function receives input, the function returns the input without any mutation...

//pure function Rule A:
//if function receives input, the function returns the input without any mutation...

//is this function is pure function or not: Pure
function Hello(message) {
    return message;
}
console.log(Hello('hello'))

//is this function is pure function or not: Impure function.
//The function modifies the input parameter
function Hai(message) {
    return message.toUpperCase();
}
console.log(Hai('hai'))

Are we applying pure function rule a in React?

Yes,With Respect to props every function is pure.

import ReactDOM from "react-dom/client"

const Hello = props => {
    //props are read only.
    //props.message = 'foo'
    return <>
       <h1>{props.message}</h1>
    </>
}


const App = () => {
    return <Hello message="hello" />
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)
....................................................................................


Rule B:
.......
 if function receives input, what if i want to change(mutate),We can apply rule b.
 
if function receives input,and modify input , we should return new object every time, which is called immutablity. 

//Pure Function Rule B:
//pure funciton means the function should return new Object every time when we change the property of the object-Immuablity.

//this function is impure function :
// function updateProfile(profile, city) {
//     //update logic
//     profile.city = city
//     return profile;
// }

//function must return new Object every time: immutablity.
//there are various ways to create immutable object
//way 1: plain javascript pattern
// function updateProfile(profile, city) {
//     //return new Object
//     return {
//         id: profile.id,
//         name: profile.name,
//         city: city
//     }
// }

// //way 2: Object.assign pattern
// function updateProfile(profile, city) {
//     //return new Object
//     return Object.assign({}, profile, { city: city })
// }

//way 3: ES 7 Spread notation pattern
function updateProfile(profile, city) {
    //return new Object
    return { ...profile, city: city }
}


const profile = {
    id: 1,
    name: 'Subramaian',
    city: 'New York'
}
console.log('Before update', profile)
const updatedProfile = updateProfile(profile, 'London')
//To test whether object is immutable or not 
console.log(profile === updatedProfile ? "Same object" : "Different Object")
console.log('After update', updatedProfile)


Immutablity and Arrays:
  When you apply rule for changing arrays, you must apply pure functions rule.

List of Array immutable apis:
1.concat  - Adding new Item
2.map- iterate and transform update
3.filter,slice => delete
4.reverse,sort ->sorting and rever


import React from "react"
import ReactDOM from "react-dom/client"

//state mutation inside class component

class Review extends React.Component {

    //state declaration
    state = {
        like: 0,
        dislike: 0
    }
    //event handler : as an arrow function 
    onLike = () => {
        // this.setState(previousState => {
        //     //write immutable logic 
        //     // return {
        //     //     like: previousState.like + 1,
        //     //     dislike: previousState.dislike
        //     // }
        //     // return Object.assign({}, previousState, { like: previousState.like + 1 })
        //     return { ...previousState, like: previousState.like + 1 }
        // })

        this.setState(previousState => ({ ...previousState, like: previousState.like + 1 }))
    }

    onDislike = ()=>{
        this.setState(previousState => ({ ...previousState, dislike: previousState.dislike + 1 }))
    }
    render() {
        console.log(this.state)
        return <div>
            <h1>Review App</h1>
            <h3>Like {this.state.like}  Dislike  {this.state.dislike}</h3>
            <button onClick={this.onLike}>Like</button>
            <button onClick={this.onDislike}>Dislike</button>
        </div>
    }
}

const App = () => {
    return <>
        <Review />
    </>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)
.....................................................................................
			Inline Listeners
.....................................................................................
import React from "react"
import ReactDOM from "react-dom/client"

class Review extends React.Component {
    state = {
        like: 0,
        dislike: 0
    }
    render() {
        return <div>
            <h1>Review App</h1>
            <h3>Like {this.state.like}  Dislike  {this.state.dislike}</h3>
            <button onClick={() => {
                this.setState(previousState => ({ ...previousState, like: previousState.like + 1 }))
            }}>Like</button>
            <button onClick={() => {
                this.setState(previousState => ({ ...previousState, dislike: previousState.dislike + 1 }))
            }}>Dislike</button>
        </div>
    }
}

const App = () => {
    return <>
        <Review />
    </>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)

....................................................................................
			Dynamic Props : state and function as prop.
//////////////////////////////////////////////////////////////////////////////////

import React from "react"
import ReactDOM from "react-dom/client"

class Review extends React.Component {
    state = {
        like: 0,
        dislike: 0
    }
    //biz 
    onLike = () => {
        this.setState(previousState => this.setState(previousState => ({ ...previousState, like: previousState.like + 1 })))
    }
    onDislike = () => {
        this.setState(previousState => this.setState(previousState => ({ ...previousState, dislike: previousState.dislike + 1 })))
    }
    render() {
        return <div>
            <h1>Review App</h1>
            {/* State as prop and function as prop */}
            <ReviewDisplay {...this.state} onLike={this.onLike} onDislike={this.onDislike} />
        </div>
    }
}
//child component which displays state 
const ReviewDisplay = props => {
    return <>
        <h1>Like {props.like} Dislike {props.dislike}</h1>
        <button onClick={props.onLike}>Like</button>
        <button onClick={props.onDislike}>Dislike</button>

    </>
}

const App = () => {
    return <>
        <Review />
    </>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)

can be classified into 3 phases

1.mount
2.update
3.unmount

1.Mounting
 This is inital phase of an component.

The methods are called in order when an instance of a component is being created and inserted into the DOM.

render is called for preparing ui

componentDidMount is called after ui is ready, and all resource intensive tasks such as api calls,websocket calls ,timer code, all are written here.

eg:
import React from "react"
import ReactDOM from "react-dom/client"

//parent component
class Parent extends React.Component {

    constructor() {
        super()
        console.log('parent component')
    }
    render() {
        console.log('parent render')
        return <>
            <Child />
        </>
    }
    componentDidMount() {
        console.log('Parent componentDidMount')
    }
}
//child component
class Child extends React.Component {

    constructor() {
        super()
        console.log('Child component')
    }
    render() {
        console.log('Child render')
        return <>

        </>
    }

    componentDidMount() {
        console.log('Child componentDidMount')
    }


}


const App = () => {
    return <>
        <Parent />
    </>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)
....................................................................................
			Web Service integration
.....................................................................................

Data for the component can be fetched in two ways

1.inital render
2.when user interacts

How to integrate ajax in react?
 React has no any api for talking to webservices
You can use any popular js ajax libs

1.fetch api
2.axios



import React from "react"
import ReactDOM from "react-dom/client"


class Posts extends React.Component {

    state = {
        posts: []
    }

    render() {
        return <div>
            <h1>Posts</h1>
            <ul>
                {this.state.posts.map(post => {
                    return <p>{post.title}</p>
                })}
            </ul>
        </div>
    }
    componentDidMount() {
        this.fetchPosts();
    }
    fetchPosts = async () => {
        const postsResponse = await fetch('https://jsonplaceholder.typicode.com/posts')
        const posts = await postsResponse.json()
        console.log(posts)
        this.setState(previousState => {
            return Object.assign({}, previousState, { posts: previousState.posts.concat(posts) })
        })
    }
}

const App = () => {
    return <>
        <Posts />
    </>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)
....................................................................................
			 conditional rendering
.....................................................................................

There are three possibilites you have when you do ajax calls

1.you may have data on time
2.you may not have data on time- delay or slow calls
   we can show spinners
3.you may get error.
  server down,network failures, mal functions

you have to write code according to state of an api

1.success on time
2.success with spinner
3.error

how to write if...else conditions inside jsx?
 conditional rendering...


import React from "react"
import ReactDOM from "react-dom/client"


const Error = props => {
    return <>
        <h2>{props.error}</h2>
    </>
}
const Spinner = props => {
    return <>
        <h2>Loading....</h2>
    </>
}
const PostList = props => {
    return <div>
        {
            props.posts.map(post => {
                return <div key={post.id}>
                    <h2>{post.id}</h2>
                    <h6>{post.title}</h6>
                    <p>{post.body}</p>
                </div>
            })
        }
    </div>
}

class Posts extends React.Component {
    state = {
        isLoaded: false,//spinner status
        posts: [],
        error: null
    }

    render() {
        const { error, isLoaded, posts } = this.state
        if (error) {
            return <Error error={error} />
        } else if (!isLoaded) {
            return <Spinner />
        } else {
            return <PostList posts={posts} />
        }
    }
    componentDidMount() {
        this.fetchPosts();
    }
    fetchPosts = async () => {
        try {
            const postsResponse = await fetch('https://jsonplaceholder.typicode.com/posts')
            const posts = await postsResponse.json()
            console.log(posts)
            //slow calls : todo: remove this setTimeout once if you understand the code:
            setTimeout(() => {
                this.setState(previousState => {
                    return Object.assign({}, previousState, { posts: previousState.posts.concat(posts), isLoaded: true })
                })
            }, 5000)

        }
        catch (err) {
            this.setState(previousState => {
                return {
                    ...previousState, isLoaded: true, error: "something went"
                }
            })
        }
    }
}

const App = () => {
    return <>
        <Posts />
    </>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)
.....................................................................................
			Hooks
....................................................................................

What is hook?
  It is a feature in react and react native to eleminate class components to make every thing functional components.

Why hooks?
 class components encapsulate the biz logic which cant be reused across the application.

What is hook?
 hook is just javascript function, may take arg or may return value..

Convtionally every hook starts with "use" Notation

eg:
 useState
 useEffect
 useLayout
etc....

Hook types:
1.built in hooks provided by react
2.custom hooks, we can create our own hooks...
....................................................................................

import React, { useState } from "react"
import ReactDOM from "react-dom/client"

//Hooks.
class Counter_ extends React.Component {
    state = {
        counter: 0
    }
    render() {
        return <>
            <h1>Counter {this.state.counter}</h1>
            <button onClick={() => {
                this.setState((state) => {
                    return { ...state, counter: state.counter + 1 }
                })
            }}>+</button>
        </>

    }
}

//functional component 
const Counter = props => {
    const [counter, setCounter] = useState(0)

    //listener
    const onIncrement = () => {
        // setCounter(state => {
        //     return state + 1
        // })
        // setCounter(state =>state + 1)
        setCounter(counter + 1)

    }

    return <>
        <h1>Counter {counter}</h1>
        <button onClick={onIncrement}>+</button>
        <button onClick={() => {
            setCounter(counter - 1)
        }}>-</button>

    </>

}


const App = () => {
    return <Counter />
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)
...

Hooks with Object:
import React, { useState } from "react"
import ReactDOM from "react-dom/client"

const Review = props => {

    const [review, setReview] = useState({ like: 0, dislike: 0 })

    //listener
    const onLike = () => {
        // setReview(review => {
        //     //immutable object 
        //     return { ...review, like: review.like + 1 }
        // })
        setReview({ ...review, like: review.like + 1 })
    }


    return <div>
        <h1>Review Application</h1>
        <h1>Like {review.like} Dislike {review.dislike}</h1>
        <button onClick={onLike}>Like</button>
        <button onClick={() => {
            setReview(review => {
                //immutable object 
                return { ...review, dislike: review.dislike + 1 }
            })
        }}>Dislike</button>

    </div>

}


const App = () => {
    return <Review />
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)
.....................................................................................
			useEffect Hook and WebService
....................................................................................

import React, { useEffect, useState } from "react"
import ReactDOM from "react-dom/client"

//Using useEffect hook with web service
const Error = props => {
    return <>
        <h2>{props.error}</h2>
    </>
}
const Spinner = props => {
    return <>
        <h2>Loading....</h2>
    </>
}
const Posts = () => {
    let initalState = {
        isLoaded: false,
        items: [],
        error: null
    }
    const [posts, setPosts] = useState(initalState)

    //api call with useEffect 
    async function fetchPosts() {
        try {
            const url = 'https://jsonplaceholder.typicode.com/posts'
            //const values = await (await fetch(url)).json()
            const response = await fetch(url)
            const values = await response.json()
            setPosts({ ...posts, isLoaded: true, items: posts.items.concat(values) })
        }
        catch (err) {
            setPosts({ ...posts, isLoaded: true, error: err })
        }
    }

    //ComponentDidMount
    useEffect(() => {
        fetchPosts()
        console.log(posts)
    }, [])


    const { error, isLoaded, items } = posts

    if (error) {
        return <Error error={error} />
    } else if (!isLoaded) {
        return <Spinner />
    } else {
        return <PostList posts={items} />
    }

}
const PostList = props => {
    console.log(props)
    return <div>
        {
            props.posts.map(post => {
                return <div key={post.id}>
                    <h2>{post.id}</h2>
                    <h6>{post.title}</h6>
                    <p>{post.body}</p>
                </div>
            })
        }
    </div>
}


const App = () => {
    return <Posts />
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)