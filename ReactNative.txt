                                          React Native
.....................................................................................

What is React Native?

1.React Native is js lib for building native mobile apps 
2.React Native combines the best parts of native development with React, a best-in-class  JavaScript library for building user interfaces.

Mobile App development:

 Mobile apps are built using mobile platforms and os.

Mobile platforms:
1.Android
2.Ios

Mobile devices are acting front end devices, user interfaces communicates back end services.

Dev:
 1.user interface developer/front end developer
 2.back end developer
 3.full stack developer.

Front end developer who dev apps for  front devices.

Dev generally build apps for desktops:
  Standalone desktop apps
  Browser based apps- javascript,html,css - react,angular,vue.....

Mobile /Tab apps:
 Dev builds apps for android platform using java , kotlin pl.
 in iOS development, you use Swift or Objective-C.

Types of mobile Apps:
.....................

1.Native Mobile
2.Web apps
3.Hybrid apps

1.Native Mobile
   Mobile apps are built by using native platform languages- java / Swift.
2.Web apps
   Apps built for browsers -Mobile browsers
3.Hybrid  apps
   built apps using javascript but it wont run inside browser, runs inside mobile using container(WebView).


Hybrid apps:

 Application built using javascript,css,html,looks like native apps.

Why Hybrid Apps?

-incase native apps, we need to maintain two code base for both platform.

Why not to build one single portable app for all platforms?

 That is birth of hybrid apps.

Hybrids apps can be built using existing web tech- js,css,html.
Js is simple dom language, how to access platform services such as contacts,networks,storage..
- a lib was created -cordova , based on cordova adobe started building a framework on top of the cordova , called phoneGap.

How to build mobile native apps in portable way using same javascript technology without html and css?

			   That is birth of React Native.
....................................................................................
				 React Native Architecture
....................................................................................


React native applications are written using react(js) core principles
 -Component
 -Props
 -State
 -Event Handling

Every react native apps are simple javascript code.

In React Native, there is no webview concept. React native never run inside browser.

ReactNative code base is classified into two category

1.User Interface
2.Application logic

In Normal react js, User interface is written using HTML language, application logic is written using plain js(react js using state,events,props)...

In React Native, User interface is written using "Mobile Elements", application logic is written using plain js(react js using state,events,props)...


UI Mark Up code for React native:

React native does not use html language to build ui elements.
React Native provides a high level ui components already written, so we can use those
components only.Why?
 We are building portable application either for android or ios.
So we need generic concept for both  platforms. 
For that React native provides a generic components for both platforms.

What is it? What is happening during compilation?

Source code is converted into another source code - Compilation.
Another code is platform specific code. android code or ios code.
if i wirte ui components, ui components will be converted to platform spefic components.
javascript code will be emitted as it is-app code.

How react native apps are executed?  Execution Model:
.....................................................

All views are executed by platform runtimes eg: android by art.
All javascript is executed by Hermes Js engine.
https://hermesengine.dev/

How to build react native apps?


React native apps can be built using two work flows.


1.Native Work flow

 If you are already familiar with mobile development, you may want to use React Native CLI.
 It requires Xcode or Android Studio to get started. If you already have one of these tools installed, you should be able to get up and running within a few minutes. If they are not installed, you should expect to spend about an hour installing and configuring them.

2.Expo Work Flow.
  If you are new to mobile development, the easiest way to get started is with Expo CLI. Expo is a set of tools built around React Native and, while it has many features, the most relevant feature for us right now is that it can get you writing a React Native app within minutes

Native work flow:
 
if you want to build professional mobile app you need lot of infrastructure.
 UI Components
    -Views,Text,Labels,ListViews,ScrollView,TabView...........

React native core team provides all core components necessary to build mobile apps.

What if i want more components which is not supported by react core team.

YOu need to look at community or companies who provides professional mobile apps.

-Community -https://reactnative.directory/


Expo Work flow:
...............
What is expo?

 Expo is a framework and a platform for universal React applications. It is a set of tools and services built around React Native and native platforms that help you develop, build, deploy, and quickly iterate on iOS, Android, and web apps from the same JavaScript/TypeScript codebase.
.....................................................................................
			ReactNative Project
....................................................................................

You can setup either using React Native cli or EXPO Cli.


React Native cli:
................

Windows-Android:

Requirements:

Node js,
React Native command line interface,
JDK,
Android Studio

https://reactnative.dev/docs/environment-setup?guide=native&os=windows&platform=android

.............

Create new React Native Project:
................................
npx react-native@latest init AwesomeProject


>npx react-native@latest init AwesomeProject
Need to install the following packages:
react-native@0.72.6
Ok to proceed? (y) y

√ Downloading template
√ Copying template
√ Processing template
√ Installing dependencies


  Run instructions for Android:
    • Have an Android emulator running (quickest way to get started), or a device connected.
    • cd "E:\session\IBM\2023\Oct\ReactNative\AwesomeProject" && npx react-native run-android

  Run instructions for Windows:
    • See https://aka.ms/ReactNativeGuideWindows for the latest up-to-date instructions.

....................................................................................
Compiler Configuration:

React Native uses different compilers

1.babel
  convert jsx code into java script
2.Metro Bundler -https://facebook.github.io/metro/
  Convert React native code into Platform specific code..

config files:

1.package.json
   This is project configuration files 
 -scripts
      "android": "react-native run-android",
      "ios": "react-native run-ios",
      "start": "react-native start",
   How to use this script?
    npm run android -->which deploys apps in android
    npm run ios --->which deploys apps in ios 
    npm start --> which shows options and later you can select env

 -dependencies
	react  - contains core react features-components,props,state,events
	react-native -contains core react native/mobile compoents and apis


2.tsconfig.json
   By default , react native apps enables type script support which is super set of java script language.

3.metro.config.js
  Metro bundler configuration, metro is responsible for converting js code into native code.

4.jest.config.js
   Unit testing and e2e testing setup.

5.app.json 
  This is file where you can configure application properties

6. .eslintrc.json
   This is file which contains linting rules - static code analysis rules.

7. babel.config.js
    jsx compiler configuration, which converts jsx code into javascript..


Folders:
........
node_modules
   Contains libs and framework code
.bundle 
   contains bundled executable code
Andorid
IOS
....................................................................................
How to build the project?

npm run android
or
npx react-native run-android
or 
npm start

....................................................................................

Entry file:

index.js

import {AppRegistry} from 'react-native';
import App from './App';
import {name as appName} from './app.json';

AppRegistry.registerComponent(appName, () => App);
		|
               Mounting root Component

Root Component is always App Component.

React Native Application Architecture:
......................................

React Native apps are collection of components(From react native core,third party components,expo components).

Basic template :

import React from 'react'

Components:
...........
Text,View,Image,TextInput,StyleSheet,ScrollView etc...

1.Text ---> <p>

HelloWorld: App.js
import { Text } from "react-native";

// function App() {
//     return <>
//         <Text>Welcome to React Native</Text>
//     </>
// }
const App = () => {
    return <Text>Welcome to React Native</Text>
}
export default App;

....................................................................................
2.View 

 	The most fundamental component for building a UI, View is a container that supports layout with flexbox, style, some touch handling, and accessibility controls. 
View maps directly to the native view equivalent on whatever platform React Native is running on, whether that is a UIView, <div>, android.view, etc.

import { Text, View } from "react-native";

const App = () => {
    return <View>
        <Text>Welcome to React Native</Text>
        <Text>Welcome to React Native</Text>
        <Text>Welcome to React Native</Text>
        <Text>Welcome to React Native</Text>
        <Text>Welcome to React Native</Text>
    </View>
}
export default App;
....................................................................................

Styles:
.......

In react Styles are added through css, react native does not support css because no html is used.

React Native does not allow css directly, but supports indirectly via javascript..

CSS can applied to web in two ways

1.via CSS language

body {

}
#container { 

}

<div class="container"></div>

2.via javascript 
  Dynamic css.

CSS added to element dynamically after page has been rendered.

JS provides an api to add css dynamically.

anyElement.style=stylevalue

eg:
document.getElementById("myDiv").style.border = "thick solid #0000FF";

https://www.w3schools.com/jsref/dom_obj_style.asp

React native supports css via coding...
.....................................................................................

React Native Styling:

React Native provides "StyleSheet Component" through which you can add styles for elements

StyleSheet object has method called "create" method

StyleSheet.create({
 styleProperty: propvalue,
 stylePropery:{
    styleProp:propValue
 }
});

StyleSheet must follow css javascript property rules..
import { Text, View, StyleSheet } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <Text style={styles.label}>React Native</Text>
        {/* Inline style */}
        <Text style={{
            color: 'blue',
            fontSize: 20,
            textAlign: 'center',
            borderRadius: 8,
            padding: 15,
            borderWidth: 4,
        }}>React Native is Best Javascript lib for Native Mobile App development</Text>

        <Text style={{
            color: 'blue',
            fontSize: 20,
            textAlign: 'center',
            borderRadius: 8,
            padding: 15,
            borderWidth: 4,
        }}>React Native is Best Javascript lib for Native Mobile App development</Text>

        <Text style={{
            color: 'blue',
            fontSize: 20,
            textAlign: 'center',
            borderRadius: 8,
            padding: 15,
            borderWidth: 4,
        }}>React Native is Best Javascript lib for Native Mobile App development</Text>

    </View>
}
export default App;

//Setting styles:

const styles = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: '#f4e1d2'
        // backgroundColor: 'lightblue',
        // height: 820
    },
    label: {
        fontSize: 30,
        color: 'red',
        textAlign: 'center',
        fontWeight: 'bold'
    }
})

....................................................................................
			 Compoents and React Native
....................................................................................

Components follows React core principles 

1.composition
2.props
3.state


compostion:
import { Text, View, StyleSheet } from "react-native";

const Hello = props => <><Text style={styles.label}>Greeter</Text></>

const Greeter = props => <>
    <Hello />
</>


const App = () => {
    return <View style={styles.container}>
        <Greeter />
    </View>
}
export default App;


const styles = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: '#f4e1d2',
        alignItems: 'center',
        justifyContent: 'center',
    },
    label: {
        fontSize: 30,
        color: 'red',
        textAlign: 'center',
        fontWeight: 'bold'
    }
})

Props:
import { Text, View, StyleSheet } from "react-native";

const Greeter = props => <>
    <Text style={styles.label}>{props.message}</Text>
</>
//Default Props
Greeter.defaultProps = {
    message: 'Hello'
}

const App = () => {
    return <View style={styles.container}>
        <Greeter message="Welcome" />
        <Greeter message="Hello" />
        <Greeter message="How are you" />
        <Greeter message="Hai" />
        <Greeter message="Greet" />

    </View>
}
export default App;


const styles = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: '#f4e1d2',
        alignItems: 'center',
        justifyContent: 'center',
    },
    label: {
        fontSize: 30,
        color: 'red',
        textAlign: 'center',
        fontWeight: 'bold'
    }
})

State:
.....
import { useState } from "react";
import { Text, View, StyleSheet, Button } from "react-native";

const Review = props => {
    const [like, setLike] = useState(0)
    //listener
    const onLike = () => {
        setLike(like + 1)
    }
    return <>
        <Text style={styles.label}>Review Application</Text>
        <Text style={styles.label}>Like : {like}</Text>
        <Button title="Like" onPress={onLike} />
    </>
}

const App = () => {
    return <View style={styles.container}>
        <Review />
    </View>
}
export default App;


const styles = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: '#f4e1d2',
        alignItems: 'center',
        justifyContent: 'center',
    },
    label: {
        fontSize: 30,
        color: 'red',
        textAlign: 'center',
        fontWeight: 'bold'
    }
})
.....................................................................................
			Stylesheet - Layouts
.....................................................................................
Height and Width:
................
 How any ui element(graphical elements) are reprsented in computers?

Any element is represented as "Rectangle box".
if it is box which has some basic properties
1.height
2.width
3.space values
  3.1.margins-space allocated outside box
  3.2.padding-space allocated inside box.

A Component's height and width determine its size on the screen.

Every element has default width and height.

Width of the element is width of the container element by default.
Container element is element which contains other elements
In browser we start with div as root container, in react native we use "View"

height of the element is height of the element itself by default.


In Browser width and height is measured in the pixels or in %.
There are two ways you can give measures

=>fixed  -  50px
=>fluid - reponsive 50%

React Native and Fixed Dimensions:
..................................

=>The general way to set the dimensions of a component is by adding a fixed width and hight to style.
=>All dimensions in react native is unitless and represent density-independent pixels.


Eg:
import { Text, View } from "react-native";

const App = () => {
    return <View>
        <View style={{
            width: 50,
            height: 50,
            backgroundColor: 'blue'
        }} />
        <View style={{
            width: 100,
            height: 100,
            backgroundColor: 'skyblue'
        }} />
        <View style={{
            width: 150,
            height: 150,
            backgroundColor: 'red'

        }} />
    </View>
}
export default App;

...................................................................................
Percentage Dimensions:

 It is similar to responsive web design

=>The parent dimenstions are required to calulate % based width for child element.
=>The drawback of this measurements we need to take care of manual calculation.

Eg:
import { View } from "react-native";

const App = () => {
    return <View style={{ width: '100%', height: '100%', backgroundColor: 'pink' }}>
        {/* Child elements */}
        <View style={{ height: '15%', backgroundColor: 'red' }} />
        <View style={{ height: '35%', width: '66%', backgroundColor: 'skyblue' }} />
        <View style={{ height: '50%', width: '33%', backgroundColor: 'steelblue' }} />
    </View>
}
export default App;
...................................................................................
			Layouts Design using Flex box
....................................................................................

CSS supports multiple layout methodology.

1.fixedwith layout.
   =>float,position properties are used to position elements on the screen.

2.Responsive web layouts
   =>the layout is adjusted based on the screen resolution and size using percentage      pattern

3.Grids layout
  =>The  layout is highly responsive but 
  =>CSS Grid Layout is a two-dimensional layout system for the web.
  =>It lets you lay content out in rows and columns. 

4.Flexbox layout
  Flexbox is a one-dimensional layout method for arranging items in rows or columns
  Items flex (expand) to fill additional space or shrink to fit into smaller spaces. 

..................................................................................
				Flex box layout
...................................................................................
React Native supports flex box layout by default..


Core Concepts of FlexBox:
........................
Axis:
  Flex box organizies the content either in main axis(x axis) or cross axis(y axis).

Main Axis:
.........
The main axis is the axis running in the direction the flex items are laid out in (for example, as a row across the page, or a column down the page.)
The start and end of this axis are called the main start and main end.

Cross axis:
...........
The cross axis is the axis running perpendicular to the direction the flex items are laid out in.
The start and end of this axis are called the cross start and cross end

Flex ITem:
.........
=>The items laid out as flexible boxes inside the flex container are called flex items

Flex Container:
...............
=>in order to start flex box layout we must have flex container.

Space Allocation:
.................
  Flex will define how your flex items are going to "fill" over the availble space along your main axis. 
  Space will be divided according to each element's flex property..

flex:1 for Container:
....................
 Generally flex container will have value always 1. meaning that it calculates the screen width and height automatically.
  flex :1 in container means the whole width and height of the screen, let says my screen width is 120px and height is 150px then these values are calculated automatically.

<View style={{flex:1}}>
  <View/>

</View>
How to activate the flex layout?
  Flex layout is activated inside every react element by default

Flex values and Flex Items:
.........
<View style={{ flex: 1 }}>
        {/* Flex items:children */}
        <View style={{flex:1,backgroundColor:'red'}} />
        <View style={{flex:2,backgroundColor:'yellow'}}/>
        <View style={{flex:3,backgroundColor:'blue'}} />
</View>


The total flex container space is "divided among child(flex items)"

Calculation

flex 1 + flex 2 + flex 3 =Total flex space 
1+2+3=6

box1 which takes 1/6
box2 which takes 2/6
box3 which takes 3/6

eg:
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ flex: 1, backgroundColor: 'red' }} />
        <View style={{ flex: 2, backgroundColor: 'yellow' }} />
        <View style={{ flex: 2, backgroundColor: 'blue' }} />
        <View style={{ flex: 3, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink'
    }
})
....................................................................................
			 Nested Container
...................................................................................
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ flex: 1, backgroundColor: 'red' }} />
        <View style={{ flex: 2, backgroundColor: 'yellow' }} />
        <View style={{ flex: 2, backgroundColor: 'blue' }} />
        <View style={{ flex: 3, backgroundColor: 'green' }}>
            <View style={{ flex: 1, backgroundColor: 'white' }} />
            <View style={{ flex: 2, backgroundColor: 'yellow' }} />
        </View>
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink'
    }
})
.....................................................................................
			   Flex direction Properties
....................................................................................

flexDirection property controls the direction in which the children(flex items) are laid out within child element.

flex direction has values:

1.column:
     Align childrens top to bottom which is default.

2.row:
    Align childrens left to right

3.column-reverse:
    Align childrens from the bottom to top.

4.row-reverse:
   Align childrens right to left.

Column:
.......
 Column is default direction property.
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'column',
        backgroundColor: 'pink'
    }
})

Row:
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'row',
        backgroundColor: 'pink'
    }
})

Column Reverse:
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'column-reverse',
        backgroundColor: 'pink'
    }
})
Row Reverse:
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'row-reverse',
        backgroundColor: 'pink'
    }
})
.....................................................................................
				Layout Direction
.....................................................................................
Layout direction represents the direction in which children and text in hierarchy should be laid out. Layout Direction also affects what edge start and end refers

By default React native lays out With LTR(Left to Right) layout

LTR:
  Text and Children are laid out from left to right.
  Margin and padding applied to the start of an element are applied on the left side.

RTL:
  Text and Children are laid out from right to left.
  Margin and padding applied to the start of an element are applied on the right   side.

....................................................................................