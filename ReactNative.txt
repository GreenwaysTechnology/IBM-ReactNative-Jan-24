                                          React Native
.....................................................................................

What is React Native?

1.React Native is js lib for building native mobile apps 
2.React Native combines the best parts of native development with React, a best-in-class  JavaScript library for building user interfaces.

Mobile App development:

 Mobile apps are built using mobile platforms and os.

Mobile platforms:
1.Android
2.Ios

Mobile devices are acting front end devices, user interfaces communicates back end services.

Dev:
 1.user interface developer/front end developer
 2.back end developer
 3.full stack developer.

Front end developer who dev apps for  front devices.

Dev generally build apps for desktops:
  Standalone desktop apps
  Browser based apps- javascript,html,css - react,angular,vue.....

Mobile /Tab apps:
 Dev builds apps for android platform using java , kotlin pl.
 in iOS development, you use Swift or Objective-C.

Types of mobile Apps:
.....................

1.Native Mobile
2.Web apps
3.Hybrid apps

1.Native Mobile
   Mobile apps are built by using native platform languages- java / Swift.
2.Web apps
   Apps built for browsers -Mobile browsers
3.Hybrid  apps
   built apps using javascript but it wont run inside browser, runs inside mobile using container(WebView).


Hybrid apps:

 Application built using javascript,css,html,looks like native apps.

Why Hybrid Apps?

-incase native apps, we need to maintain two code base for both platform.

Why not to build one single portable app for all platforms?

 That is birth of hybrid apps.

Hybrids apps can be built using existing web tech- js,css,html.
Js is simple dom language, how to access platform services such as contacts,networks,storage..
- a lib was created -cordova , based on cordova adobe started building a framework on top of the cordova , called phoneGap.

How to build mobile native apps in portable way using same javascript technology without html and css?

			   That is birth of React Native.
....................................................................................
				 React Native Architecture
....................................................................................


React native applications are written using react(js) core principles
 -Component
 -Props
 -State
 -Event Handling

Every react native apps are simple javascript code.

In React Native, there is no webview concept. React native never run inside browser.

ReactNative code base is classified into two category

1.User Interface
2.Application logic

In Normal react js, User interface is written using HTML language, application logic is written using plain js(react js using state,events,props)...

In React Native, User interface is written using "Mobile Elements", application logic is written using plain js(react js using state,events,props)...


UI Mark Up code for React native:

React native does not use html language to build ui elements.
React Native provides a high level ui components already written, so we can use those
components only.Why?
 We are building portable application either for android or ios.
So we need generic concept for both  platforms. 
For that React native provides a generic components for both platforms.

What is it? What is happening during compilation?

Source code is converted into another source code - Compilation.
Another code is platform specific code. android code or ios code.
if i wirte ui components, ui components will be converted to platform spefic components.
javascript code will be emitted as it is-app code.

How react native apps are executed?  Execution Model:
.....................................................

All views are executed by platform runtimes eg: android by art.
All javascript is executed by Hermes Js engine.
https://hermesengine.dev/

How to build react native apps?


React native apps can be built using two work flows.


1.Native Work flow

 If you are already familiar with mobile development, you may want to use React Native CLI.
 It requires Xcode or Android Studio to get started. If you already have one of these tools installed, you should be able to get up and running within a few minutes. If they are not installed, you should expect to spend about an hour installing and configuring them.

2.Expo Work Flow.
  If you are new to mobile development, the easiest way to get started is with Expo CLI. Expo is a set of tools built around React Native and, while it has many features, the most relevant feature for us right now is that it can get you writing a React Native app within minutes

Native work flow:
 
if you want to build professional mobile app you need lot of infrastructure.
 UI Components
    -Views,Text,Labels,ListViews,ScrollView,TabView...........

React native core team provides all core components necessary to build mobile apps.

What if i want more components which is not supported by react core team.

YOu need to look at community or companies who provides professional mobile apps.

-Community -https://reactnative.directory/


Expo Work flow:
...............
What is expo?

 Expo is a framework and a platform for universal React applications. It is a set of tools and services built around React Native and native platforms that help you develop, build, deploy, and quickly iterate on iOS, Android, and web apps from the same JavaScript/TypeScript codebase.
.....................................................................................
			ReactNative Project
....................................................................................

You can setup either using React Native cli or EXPO Cli.


React Native cli:
................

Windows-Android:

Requirements:

Node js,
React Native command line interface,
JDK,
Android Studio

https://reactnative.dev/docs/environment-setup?guide=native&os=windows&platform=android

.............

Create new React Native Project:
................................
npx react-native@latest init AwesomeProject


>npx react-native@latest init AwesomeProject
Need to install the following packages:
react-native@0.72.6
Ok to proceed? (y) y

√ Downloading template
√ Copying template
√ Processing template
√ Installing dependencies


  Run instructions for Android:
    • Have an Android emulator running (quickest way to get started), or a device connected.
    • cd "E:\session\IBM\2023\Oct\ReactNative\AwesomeProject" && npx react-native run-android

  Run instructions for Windows:
    • See https://aka.ms/ReactNativeGuideWindows for the latest up-to-date instructions.

....................................................................................
Compiler Configuration:

React Native uses different compilers

1.babel
  convert jsx code into java script
2.Metro Bundler -https://facebook.github.io/metro/
  Convert React native code into Platform specific code..

config files:

1.package.json
   This is project configuration files 
 -scripts
      "android": "react-native run-android",
      "ios": "react-native run-ios",
      "start": "react-native start",
   How to use this script?
    npm run android -->which deploys apps in android
    npm run ios --->which deploys apps in ios 
    npm start --> which shows options and later you can select env

 -dependencies
	react  - contains core react features-components,props,state,events
	react-native -contains core react native/mobile compoents and apis


2.tsconfig.json
   By default , react native apps enables type script support which is super set of java script language.

3.metro.config.js
  Metro bundler configuration, metro is responsible for converting js code into native code.

4.jest.config.js
   Unit testing and e2e testing setup.

5.app.json 
  This is file where you can configure application properties

6. .eslintrc.json
   This is file which contains linting rules - static code analysis rules.

7. babel.config.js
    jsx compiler configuration, which converts jsx code into javascript..


Folders:
........
node_modules
   Contains libs and framework code
.bundle 
   contains bundled executable code
Andorid
IOS
....................................................................................
How to build the project?

npm run android
or
npx react-native run-android
or 
npm start

....................................................................................

Entry file:

index.js

import {AppRegistry} from 'react-native';
import App from './App';
import {name as appName} from './app.json';

AppRegistry.registerComponent(appName, () => App);
		|
               Mounting root Component

Root Component is always App Component.

React Native Application Architecture:
......................................

React Native apps are collection of components(From react native core,third party components,expo components).

Basic template :

import React from 'react'

Components:
...........
Text,View,Image,TextInput,StyleSheet,ScrollView etc...

1.Text ---> <p>

HelloWorld: App.js
import { Text } from "react-native";

// function App() {
//     return <>
//         <Text>Welcome to React Native</Text>
//     </>
// }
const App = () => {
    return <Text>Welcome to React Native</Text>
}
export default App;

....................................................................................
2.View 

 	The most fundamental component for building a UI, View is a container that supports layout with flexbox, style, some touch handling, and accessibility controls. 
View maps directly to the native view equivalent on whatever platform React Native is running on, whether that is a UIView, <div>, android.view, etc.

import { Text, View } from "react-native";

const App = () => {
    return <View>
        <Text>Welcome to React Native</Text>
        <Text>Welcome to React Native</Text>
        <Text>Welcome to React Native</Text>
        <Text>Welcome to React Native</Text>
        <Text>Welcome to React Native</Text>
    </View>
}
export default App;
....................................................................................

Styles:
.......

In react Styles are added through css, react native does not support css because no html is used.

React Native does not allow css directly, but supports indirectly via javascript..

CSS can applied to web in two ways

1.via CSS language

body {

}
#container { 

}

<div class="container"></div>

2.via javascript 
  Dynamic css.

CSS added to element dynamically after page has been rendered.

JS provides an api to add css dynamically.

anyElement.style=stylevalue

eg:
document.getElementById("myDiv").style.border = "thick solid #0000FF";

https://www.w3schools.com/jsref/dom_obj_style.asp

React native supports css via coding...
.....................................................................................

React Native Styling:

React Native provides "StyleSheet Component" through which you can add styles for elements

StyleSheet object has method called "create" method

StyleSheet.create({
 styleProperty: propvalue,
 stylePropery:{
    styleProp:propValue
 }
});

StyleSheet must follow css javascript property rules..
import { Text, View, StyleSheet } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <Text style={styles.label}>React Native</Text>
        {/* Inline style */}
        <Text style={{
            color: 'blue',
            fontSize: 20,
            textAlign: 'center',
            borderRadius: 8,
            padding: 15,
            borderWidth: 4,
        }}>React Native is Best Javascript lib for Native Mobile App development</Text>

        <Text style={{
            color: 'blue',
            fontSize: 20,
            textAlign: 'center',
            borderRadius: 8,
            padding: 15,
            borderWidth: 4,
        }}>React Native is Best Javascript lib for Native Mobile App development</Text>

        <Text style={{
            color: 'blue',
            fontSize: 20,
            textAlign: 'center',
            borderRadius: 8,
            padding: 15,
            borderWidth: 4,
        }}>React Native is Best Javascript lib for Native Mobile App development</Text>

    </View>
}
export default App;

//Setting styles:

const styles = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: '#f4e1d2'
        // backgroundColor: 'lightblue',
        // height: 820
    },
    label: {
        fontSize: 30,
        color: 'red',
        textAlign: 'center',
        fontWeight: 'bold'
    }
})

....................................................................................
			 Compoents and React Native
....................................................................................

Components follows React core principles 

1.composition
2.props
3.state


compostion:
import { Text, View, StyleSheet } from "react-native";

const Hello = props => <><Text style={styles.label}>Greeter</Text></>

const Greeter = props => <>
    <Hello />
</>


const App = () => {
    return <View style={styles.container}>
        <Greeter />
    </View>
}
export default App;


const styles = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: '#f4e1d2',
        alignItems: 'center',
        justifyContent: 'center',
    },
    label: {
        fontSize: 30,
        color: 'red',
        textAlign: 'center',
        fontWeight: 'bold'
    }
})

Props:
import { Text, View, StyleSheet } from "react-native";

const Greeter = props => <>
    <Text style={styles.label}>{props.message}</Text>
</>
//Default Props
Greeter.defaultProps = {
    message: 'Hello'
}

const App = () => {
    return <View style={styles.container}>
        <Greeter message="Welcome" />
        <Greeter message="Hello" />
        <Greeter message="How are you" />
        <Greeter message="Hai" />
        <Greeter message="Greet" />

    </View>
}
export default App;


const styles = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: '#f4e1d2',
        alignItems: 'center',
        justifyContent: 'center',
    },
    label: {
        fontSize: 30,
        color: 'red',
        textAlign: 'center',
        fontWeight: 'bold'
    }
})

State:
.....
import { useState } from "react";
import { Text, View, StyleSheet, Button } from "react-native";

const Review = props => {
    const [like, setLike] = useState(0)
    //listener
    const onLike = () => {
        setLike(like + 1)
    }
    return <>
        <Text style={styles.label}>Review Application</Text>
        <Text style={styles.label}>Like : {like}</Text>
        <Button title="Like" onPress={onLike} />
    </>
}

const App = () => {
    return <View style={styles.container}>
        <Review />
    </View>
}
export default App;


const styles = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: '#f4e1d2',
        alignItems: 'center',
        justifyContent: 'center',
    },
    label: {
        fontSize: 30,
        color: 'red',
        textAlign: 'center',
        fontWeight: 'bold'
    }
})
.....................................................................................
			Stylesheet - Layouts
.....................................................................................
Height and Width:
................
 How any ui element(graphical elements) are reprsented in computers?

Any element is represented as "Rectangle box".
if it is box which has some basic properties
1.height
2.width
3.space values
  3.1.margins-space allocated outside box
  3.2.padding-space allocated inside box.

A Component's height and width determine its size on the screen.

Every element has default width and height.

Width of the element is width of the container element by default.
Container element is element which contains other elements
In browser we start with div as root container, in react native we use "View"

height of the element is height of the element itself by default.


In Browser width and height is measured in the pixels or in %.
There are two ways you can give measures

=>fixed  -  50px
=>fluid - reponsive 50%

React Native and Fixed Dimensions:
..................................

=>The general way to set the dimensions of a component is by adding a fixed width and hight to style.
=>All dimensions in react native is unitless and represent density-independent pixels.


Eg:
import { Text, View } from "react-native";

const App = () => {
    return <View>
        <View style={{
            width: 50,
            height: 50,
            backgroundColor: 'blue'
        }} />
        <View style={{
            width: 100,
            height: 100,
            backgroundColor: 'skyblue'
        }} />
        <View style={{
            width: 150,
            height: 150,
            backgroundColor: 'red'

        }} />
    </View>
}
export default App;

...................................................................................
Percentage Dimensions:

 It is similar to responsive web design

=>The parent dimenstions are required to calulate % based width for child element.
=>The drawback of this measurements we need to take care of manual calculation.

Eg:
import { View } from "react-native";

const App = () => {
    return <View style={{ width: '100%', height: '100%', backgroundColor: 'pink' }}>
        {/* Child elements */}
        <View style={{ height: '15%', backgroundColor: 'red' }} />
        <View style={{ height: '35%', width: '66%', backgroundColor: 'skyblue' }} />
        <View style={{ height: '50%', width: '33%', backgroundColor: 'steelblue' }} />
    </View>
}
export default App;
...................................................................................
			Layouts Design using Flex box
....................................................................................

CSS supports multiple layout methodology.

1.fixedwith layout.
   =>float,position properties are used to position elements on the screen.

2.Responsive web layouts
   =>the layout is adjusted based on the screen resolution and size using percentage      pattern

3.Grids layout
  =>The  layout is highly responsive but 
  =>CSS Grid Layout is a two-dimensional layout system for the web.
  =>It lets you lay content out in rows and columns. 

4.Flexbox layout
  Flexbox is a one-dimensional layout method for arranging items in rows or columns
  Items flex (expand) to fill additional space or shrink to fit into smaller spaces. 

..................................................................................
				Flex box layout
...................................................................................
React Native supports flex box layout by default..


Core Concepts of FlexBox:
........................
Axis:
  Flex box organizies the content either in main axis(x axis) or cross axis(y axis).

Main Axis:
.........
The main axis is the axis running in the direction the flex items are laid out in (for example, as a row across the page, or a column down the page.)
The start and end of this axis are called the main start and main end.

Cross axis:
...........
The cross axis is the axis running perpendicular to the direction the flex items are laid out in.
The start and end of this axis are called the cross start and cross end

Flex ITem:
.........
=>The items laid out as flexible boxes inside the flex container are called flex items

Flex Container:
...............
=>in order to start flex box layout we must have flex container.

Space Allocation:
.................
  Flex will define how your flex items are going to "fill" over the availble space along your main axis. 
  Space will be divided according to each element's flex property..

flex:1 for Container:
....................
 Generally flex container will have value always 1. meaning that it calculates the screen width and height automatically.
  flex :1 in container means the whole width and height of the screen, let says my screen width is 120px and height is 150px then these values are calculated automatically.

<View style={{flex:1}}>
  <View/>

</View>
How to activate the flex layout?
  Flex layout is activated inside every react element by default

Flex values and Flex Items:
.........
<View style={{ flex: 1 }}>
        {/* Flex items:children */}
        <View style={{flex:1,backgroundColor:'red'}} />
        <View style={{flex:2,backgroundColor:'yellow'}}/>
        <View style={{flex:3,backgroundColor:'blue'}} />
</View>


The total flex container space is "divided among child(flex items)"

Calculation

flex 1 + flex 2 + flex 3 =Total flex space 
1+2+3=6

box1 which takes 1/6
box2 which takes 2/6
box3 which takes 3/6

eg:
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ flex: 1, backgroundColor: 'red' }} />
        <View style={{ flex: 2, backgroundColor: 'yellow' }} />
        <View style={{ flex: 2, backgroundColor: 'blue' }} />
        <View style={{ flex: 3, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink'
    }
})
....................................................................................
			 Nested Container
...................................................................................
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ flex: 1, backgroundColor: 'red' }} />
        <View style={{ flex: 2, backgroundColor: 'yellow' }} />
        <View style={{ flex: 2, backgroundColor: 'blue' }} />
        <View style={{ flex: 3, backgroundColor: 'green' }}>
            <View style={{ flex: 1, backgroundColor: 'white' }} />
            <View style={{ flex: 2, backgroundColor: 'yellow' }} />
        </View>
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink'
    }
})
.....................................................................................
			   Flex direction Properties
....................................................................................

flexDirection property controls the direction in which the children(flex items) are laid out within child element.

flex direction has values:

1.column:
     Align childrens top to bottom which is default.

2.row:
    Align childrens left to right

3.column-reverse:
    Align childrens from the bottom to top.

4.row-reverse:
   Align childrens right to left.

Column:
.......
 Column is default direction property.
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'column',
        backgroundColor: 'pink'
    }
})

Row:
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'row',
        backgroundColor: 'pink'
    }
})

Column Reverse:
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'column-reverse',
        backgroundColor: 'pink'
    }
})
Row Reverse:
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'row-reverse',
        backgroundColor: 'pink'
    }
})
.....................................................................................
				Layout Direction
.....................................................................................
Layout direction represents the direction in which children and text in hierarchy should be laid out. Layout Direction also affects what edge start and end refers

By default React native lays out With LTR(Left to Right) layout

LTR:
  Text and Children are laid out from left to right.
  Margin and padding applied to the start of an element are applied on the left side.

RTL:
  Text and Children are laid out from right to left.
  Margin and padding applied to the start of an element are applied on the right   side.

....................................................................................
....................................................................................
			Aligning Child elements(Flex Items)
....................................................................................

In order to align flex items within container we have properties

1.Justify content
2.Align items
3.Align self
4.Align Content
5.Flex wrap

Justify Content:
................
Justify content:
  Align flex items within the main axis(x axis) of their container.

Flex Direction says that how to organize either row or column

justifyContent: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly'


Flex Direction: row,column,row-reverse,column-reverse + flex-start
...................................................................
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        //flexDirection: 'column',
        //flexDirection: 'row',
        //flexDirection: 'column-reverse',
        flexDirection: 'row-reverse',
        justifyContent: 'flex-start',
        backgroundColor: 'pink'
    }
})

Flex Direction: row,column,row-reverse,column-reverse + flex-end
...................................................................

import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        // flexDirection: 'column',
        //flexDirection: 'row',
        //flexDirection: 'column-reverse',
        flexDirection: 'row-reverse',
        justifyContent: 'flex-end',
        backgroundColor: 'pink'
    }
})
.....................................................................................
Flex Direction: row,column,row-reverse,column-reverse + center
...................................................................
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        // flexDirection: 'column',
        //flexDirection: 'row',
        //flexDirection: 'column-reverse',
        flexDirection: 'row-reverse',
        justifyContent: 'center',
        backgroundColor: 'pink'
    }
})
Flex Direction: row,column,row-reverse,column-reverse + space-between.
  Evenly space off children across the container's main axis,
distributing the remaining space between the children.

import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        //flexDirection: 'column',
        //flexDirection: 'row',
        //flexDirection: 'column-reverse',
        flexDirection: 'row-reverse',
        justifyContent: 'space-between',
        backgroundColor: 'pink'
    }
})
....................................................................................
Flex Direction: row,column,row-reverse,column-reverse + space-around

  Evenly space off children across the container's main axis,
distributing the remaining space around the children.
  Compared to space-between and space around will result in space being distributed to the begining of first child and end of the last child.


import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        //flexDirection: 'column',
        //flexDirection: 'row',
        //flexDirection: 'column-reverse',
        flexDirection: 'row-reverse',
        justifyContent: 'space-around',
        backgroundColor: 'pink'
    }
})

Flex Direction: row,column,row-reverse,column-reverse + space-evenly

Evenly distribute children within the alignment container along the main axis.
The spacing between each pair of adjacent items, the main-start edge and the first item, and the main end edge and the last item, are all exactly the same.

import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        // flexDirection: 'column',
        //flexDirection: 'row',
        //flexDirection: 'column-reverse',
        flexDirection: 'row-reverse',
        justifyContent: 'space-evenly',
        backgroundColor: 'pink'
    }
})
.....................................................................................
Align items:
...........

Align Items describes how to align children along with cross axis(y) of the container.
It is similar to JustifyContent but instead of applying to the main axis, alignItems applies to the cross axis.

AlignItems: 'stretch' | 'flex-start',|'flex-end' | 'center'| 'baseline'

stretch:
 It is default value , Stretch children of a container to match the "height" of the container's cross axis

Flex Direction: row,column,row-reverse,column-reverse + stretch.


import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        {/* <View style={{ width: 50, height: 50, backgroundColor: 'green' }} /> */}
        <View style={{ height: 100, backgroundColor: 'steelblue', width: 'auto', minWidth: 50 }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        // flexDirection: 'column',
        //flexDirection: 'row',
        //flexDirection: 'column-reverse',
        // flexDirection: 'row-reverse',
        alignItems: 'stretch',
        backgroundColor: 'pink'
    }
})
...................

Flex Direction: row,column,row-reverse,column-reverse + flex-start


import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        //flexDirection: 'column',
        //flexDirection: 'row',
        flexDirection: 'column-reverse',
        //flexDirection: 'row-reverse',
        alignItems: 'flex-start',
        backgroundColor: 'pink'
    }
})
...................................................................................

Flex Direction: row,column,row-reverse,column-reverse + flex-end


import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        //flexDirection: 'column',
        //flexDirection: 'row',
        flexDirection: 'column-reverse',
        //flexDirection: 'row-reverse',
        alignItems: 'flex-end',
        backgroundColor: 'pink'
    }
})

Flex Direction: row,column,row-reverse,column-reverse + center


import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'column',
        //flexDirection: 'row',
        // flexDirection: 'column-reverse',
        // flexDirection: 'row-reverse',
        alignItems: 'center',
        backgroundColor: 'pink'
    }
})
.....................................................................................
			 Align Items + Justify Content
.....................................................................................
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'column',
        //flexDirection: 'row',
        // flexDirection: 'column-reverse',
        // flexDirection: 'row-reverse',
        //alignItems: 'center',
        //justifyContent: 'space-evenly',
        justifyContent: 'flex-start',
        alignItems: 'center',
        backgroundColor: 'pink'
    }
})
.....................................................................................
.....................................................................................
				Align self - child element 
....................................................................................
Align self is similar to Align items and justify content but align self is going to have power child elements can controler their alignments.
align self can override the values set by alignItems.


Elements can align itself.

alignSelf: 'stretch' | 'flex-start',|'flex-end' | 'center'| 'baseline'

import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{
            alignSelf: 'stretch',
            width: 'auto',
            minWidth: 50,
            height: 50,
            width: 50,
            backgroundColor: 'red',
        }}

        />
        <View style={{
            backgroundColor: 'skyblue', alignSelf: 'center', height: 50,
            width: 50
        }} />
        <View style={{
            height: 50,
            width: 50, backgroundColor: 'steelblue', alignSelf: 'flex-end'
        }} />

    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        height: 60,
    }
})
...................................................................................
			Flex wrap
..................................................................................\
if more childrens beyond container size, it starts overflow, in order avoid overflow
meaning that you want to lay elements within container... we can use flex wrap.

import { StyleSheet, View, Text } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex wrap</Text>
        <View style={styles.elementsContainer}>
            <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />


        </ View>
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color: 'blue'
    },
    elementsContainer: {
        flex: 1,
        backgroundColor: 'black',
        flexDirection: 'row',
        flexWrap: 'wrap',
        justifyContent: 'center',
        marginBottom: 24
    }

})

....................................................................................
				Gap
....................................................................................

How to allocate space among elements?

 Flex gap
 =>Column gap
 =>Row gap				


import { StyleSheet, View, Text } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex wrap</Text>
        <View style={styles.elementsContainer}>
            <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />


        </ View>
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color: 'blue'
    },
    elementsContainer: {
        flex: 1,
        backgroundColor: 'black',
        flexDirection: 'row',
        flexWrap: 'wrap',
        rowGap: 10,
        columnGap: 10,
        justifyContent: 'center',
        alignItems: 'center',
        marginBottom: 24
    }

})

Guidelins, you can use for layout design
https://yogalayout.com/
https://medium.com/wix-engineering/the-full-react-native-layout-cheat-sheet-a4147802405c.....................................................................................
			Style Merging

Syntax:
 style ={[styles.box, {backgroundColor:'yellow'}]}


import { StyleSheet, View, Text } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={[styles.box,
        { backgroundColor: 'pink' }]
        } />
        <View style={[styles.box, { backgroundColor: 'green' }]} />
        <View style={[styles.box, { backgroundColor: 'yellow' }]} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    box: {
        height: 100,
        width: 100
    }

})
....................................................................................
			  Style Sheet Composition
...................................................................................

Coimbine two or more styles into one style, like array pattern, but style provides method for that.

Stylesheet.compose(style1,style2,style3)
style1 can be overriden by styles 2

import { StyleSheet, View, Text } from "react-native";

const App = () => {
    return <View style={container}>
        <Text style={text}>Hello</Text>
    </View>
}
export default App;

//Common style
const page = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: 'pink'
    },
    text: {
        fontSize: 30,
        color: '#000'
    }

})
//lists Style 
const lists = StyleSheet.create({
    listContainer: {
        flex: 1,
        backgroundColor: '#61dafb',
    },
    listItem: {
        fontSize: 30,
        fontWeight: 'bold'
    }

})

//merge two styles 
const container = StyleSheet.compose(page.container, lists.container)
const text = StyleSheet.compose(page.text, lists.listItem)
....................................................................................
....................................................................................
			   Container Components

Types of Views
1.View
2.ScrollView
3.ListView
4.SectionList


View:
import { StyleSheet, View, Text } from "react-native";

const App = () => {
    return <View style={page.container}>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>

    </View>
}
export default App;

//Common style
const page = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: 'pink'
    },
    text: {
        fontSize: 30,
        color: '#000'
    }

})
.................................................................................
			Scroll Behaviour
.................................................................................

View is going to hold child elements, act as container
ScrollView is going hold child elements , act as container with scrollbar.

import { StyleSheet, ScrollView, Text } from "react-native";

const App = () => {
    return <ScrollView style={page.container}>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
        <Text style={page.text}>Hello</Text>
    </ScrollView>
}
export default App;

//Common style
const page = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: 'pink'
    },
    text: {
        fontSize: 30,
        color: '#000'
    }

})
...................................................................................
				List Views
...................................................................................

React Native provides a suit of components for presenting lists of data, Generally, You will want to use "FlatList or Section List"

FlatList:
 It displays a scrolling list of changining, but similary structured data.
 FlatList works well for long list of data , where number of items change over time.
 When compare to ScrollView,The FlatList only renders elements that are currently s howing on the screen, not all the elements at onces.

FlatList is similar to array.map in react.

FlatList requires two properties:

1.data
  data Source
2.renderItem
  takes one item from the source and returns a formtted component to render.


FlatList with HardCoded data.
.............................
<FlatList data={dataSource} renderItem={(obj)=>{
  return<Text>{obj.item.dataSource.property}
}}

data->Data Prop is called datasource which is plain array
renderItem -
  Takes an item from data prop and renders it into list

renderItem({
 item:ItemObject(todo,contact),
 index:number,
 separators:{

 }
})

eg:
import { StyleSheet, View, Text, FlatList } from "react-native";

//mock data 
const contacts = [{
    name: 'Subramanian'
},
{
    name: 'Murugan'
},
{
    name: 'Karthik'
},
{
    name: 'Joel'
},
{
    name: 'Sunil'
},
{
    name: 'Naga'
},
{
    name: 'Kamal'
},
{
    name: 'Subramanian'
},
{
    name: 'Murugan'
},
{
    name: 'Karthik'
},
{
    name: 'Joel'
},
{
    name: 'Sunil'
},
{
    name: 'Naga'
},
{
    name: 'Kamal'
},
{
    name: 'Subramanian'
},
{
    name: 'Murugan'
},
{
    name: 'Karthik'
},
{
    name: 'Joel'
},
{
    name: 'Sunil'
},
{
    name: 'Naga'
},
{
    name: 'Kamal'
}

];

const App = () => {
    return <View style={page.container}>
        <Text style={page.text}>Contacts</Text>
        {/* <FlatList
            data={contacts}
            renderItem={(obj) => {
                console.log(obj)
                return <Text style={page.item}>{obj.item.name}</Text>
            }}
        /> */}
        {/* <FlatList
            data={contacts}
            renderItem={({ item }) => {
                return <Text style={page.item}>{item.name}</Text>
            }}
        /> */}
        <FlatList
            data={contacts}
            renderItem={({ item: { name } }) => {
                return <Text style={page.item}>{name}</Text>
            }}
        />
    </View>
}
export default App;

//Common style
const page = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: 'pink'
    },
    item: {
        padding: 10,
        fontSize: 18,
        height: 44,
        fontWeight: 'bold',
        color: 'blue'

    },
    text: {
        fontSize: 30,
        textAlign: 'center',
        color: '#000'
    }

})
.....................................................................................
			 Webservice Integration with FlatList
.....................................................................................
import { StyleSheet, View, Text, FlatList, ActivityIndicator } from "react-native";
import { useState, useEffect } from "react";

const Error = props => {
    return <>
        <Text>{props.error}</Text>
    </>
}
const Spinner = props => {
    return <View style={{ justifyContent: 'center', alignItems: 'center', flex: 1 }}>
        <ActivityIndicator size='large' color="#0000ff" />
    </View>
}


const Posts = props => {
    let initalState = {
        isLoaded: false,
        items: [],
        error: null
    }
    const [posts, setPosts] = useState(initalState)

    async function fetchPosts() {
        try {
            const url = 'https://jsonplaceholder.typicode.com/posts'
            const values = await (await fetch(url)).json()
            setPosts({ ...posts, isLoaded: true, items: posts.items.concat(values) })
        }
        catch (err) {
            setPosts({ ...posts, isLoaded: true, error: err })
        }
    }
    //useEffect : ComponentDidMount 
    useEffect(() => {
        setTimeout(() => {
            fetchPosts()
        }, 5000)
    }, [])

    const { error, isLoaded, items } = posts
    if (error) {
        return <Error error={error} />
    } else if (!isLoaded) {
        return <Spinner />
    } else {
        return <FlatList
            data={items}
            keyExtractor={item => item.id}
            renderItem={({ item }) => {
                return <Text style={page.item}>{item.title}</Text>
            }}
        />
    }

}


const App = () => {
    return <View style={page.container}>
        <Text style={page.text}>Posts</Text>
        <Posts />
    </View>
}
export default App;

//Common style
const page = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: 'pink'
    },
    item: {
        padding: 10,
        fontSize: 18,
        height: 44,
        fontWeight: 'bold',
        color: '#000'

    },
    text: {
        fontSize: 30,
        textAlign: 'center',
        color: '#000'
    }

})
....................................................................................
			How to select item from List

import { StyleSheet, View, Text, FlatList, ActivityIndicator, Alert } from "react-native";
import { useState, useEffect } from "react";

const Error = props => {
    return <>
        <Text>{props.error}</Text>
    </>
}
const Spinner = props => {
    return <View style={{ justifyContent: 'center', alignItems: 'center', flex: 1 }}>
        <ActivityIndicator size='large' color="#0000ff" />
    </View>
}


const Posts = props => {
    let initalState = {
        isLoaded: false,
        items: [],
        error: null
    }
    const [posts, setPosts] = useState(initalState)

    async function fetchPosts() {
        try {
            const url = 'https://jsonplaceholder.typicode.com/posts'
            const values = await (await fetch(url)).json()
            setPosts({ ...posts, isLoaded: true, items: posts.items.concat(values) })
        }
        catch (err) {
            setPosts({ ...posts, isLoaded: true, error: err })
        }
    }
    //useEffect : ComponentDidMount 
    useEffect(() => {
        setTimeout(() => {
            fetchPosts()
        }, 5000)
    }, [])

    const onSelect = (item) => {
        Alert.alert(JSON.stringify(item))
    }

    const { error, isLoaded, items } = posts
    if (error) {
        return <Error error={error} />
    } else if (!isLoaded) {
        return <Spinner />
    } else {
        return <FlatList
            data={items}
            keyExtractor={item => item.id}
            renderItem={({ item }) => {
                return <Text
                    style={page.item}
                    onPress={() => {
                        onSelect(item)
                    }}
                >{item.title}</Text>
            }}
        />
    }

}


const App = () => {
    return <View style={page.container}>
        <Text style={page.text}>Posts</Text>
        <Posts />
    </View>
}
export default App;

//Common style
const page = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: 'pink'
    },
    item: {
        padding: 10,
        fontSize: 18,
        height: 44,
        fontWeight: 'bold',
        color: '#000'

    },
    text: {
        fontSize: 30,
        textAlign: 'center',
        color: '#000'
    }

})
....................................................................................
			 Select Item with Touchable Features
.....................................................................................

In order to touchable features , react native offers many components

1.TouchableHighlight
2.TouchableOpacity
3.TouchableWithoutFeedBack

TouchableHighlight:

import { StyleSheet, View, Text, FlatList, ActivityIndicator, Alert, TouchableHighlight } from "react-native";
import { useState, useEffect } from "react";

const Error = props => {
    return <>
        <Text>{props.error}</Text>
    </>
}
const Spinner = props => {
    return <View style={{ justifyContent: 'center', alignItems: 'center', flex: 1 }}>
        <ActivityIndicator size='large' color="#0000ff" />
    </View>
}


const Posts = props => {
    let initalState = {
        isLoaded: false,
        items: [],
        error: null
    }
    const [posts, setPosts] = useState(initalState)

    async function fetchPosts() {
        try {
            const url = 'https://jsonplaceholder.typicode.com/posts'
            const values = await (await fetch(url)).json()
            setPosts({ ...posts, isLoaded: true, items: posts.items.concat(values) })
        }
        catch (err) {
            setPosts({ ...posts, isLoaded: true, error: err })
        }
    }
    //useEffect : ComponentDidMount 
    useEffect(() => {
        setTimeout(() => {
            fetchPosts()
        }, 5000)
    }, [])

    const onSelect = (item) => {
        Alert.alert(JSON.stringify(item))
    }

    const { error, isLoaded, items } = posts
    if (error) {
        return <Error error={error} />
    } else if (!isLoaded) {
        return <Spinner />
    } else {
        return <FlatList
            data={items}
            keyExtractor={item => item.id}
            renderItem={({ item }) => {
                return <TouchableHighlight activeOpacity={0.4} underlayColor='yellow' onPress={() => { onSelect(item) }} >
                    <View>
                        <Text style={page.item}>{item.title}</Text>
                    </View>
                </TouchableHighlight>
            }}
        />
    }

}


const App = () => {
    return <View style={page.container}>
        <Text style={page.text}>Posts</Text>
        <Posts />
    </View>
}
export default App;

//Common style
const page = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: 'pink'
    },
    item: {
        padding: 10,
        fontSize: 18,
        height: 44,
        fontWeight: 'bold',
        color: '#000'

    },
    text: {
        fontSize: 30,
        textAlign: 'center',
        color: '#000'
    }

})
....................................................................................
				Section List
....................................................................................

It is special list which shows data based on category, showing nested array.

Syntax:
<SectionList sections={list} renderItem=>{} renderSectionHeader={} keyKxtractory={}/>

import { StyleSheet, View, Text, SectionList } from "react-native";

//mock data:
const courses = [{
    title: 'User Interface',
    data: [
        'HTML',
        'CSS',
        'Android',
        'IOS'
    ]
},
{
    title: 'Back End',
    data: [
        'Java',
        'C#',
        'Microservices',
        'Python'
    ]
},
{
    title: 'Data bases',
    data: [
        'Mysql',
        'Oracle',
        'Mongo',
        'Redis'
    ]
}

]

const App = () => {
    return <View style={page.container}>
        <Text style={[page.text, { textAlign: 'center' }]}>Courses</Text>
        <SectionList
            sections={courses}
            renderItem={({ item }) => {
                return <Text style={[page.text, { backgroundColor: 'yellow' }]}>{item}</Text>
            }}
            keyExtractor={(item, index) => {
                return item + index
            }}
            renderSectionHeader={({ section: { title } }) => {
                return <Text style={page.text}>{title}</Text>
            }}

        />
    </View>
}
export default App;

//Common style
const page = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: 'pink'
    },
    text: {
        fontSize: 30,
        color: '#000'
    }

})
.....................................................................................
			TextInput
....................................................................................

How to get Input from the User?

import { useState } from "react";
import { StyleSheet, View, Text, TextInput, Button } from "react-native";

const UserName = props => {

    const [text, setText] = useState('Your Name')
    const onUpdate = () => {
        console.log('test')
        setText(text)
        console.log(text)
    }
    return <View>
        <TextInput style={page.input} onChange={() => {
            setText(text)
        }} />
        <Button onPress={onUpdate} title="Get Input" />
    </View>
}

import { useState } from "react";
import { StyleSheet, View, Text, TextInput, Button, Alert } from "react-native";

const UserName = props => {
    const [text, onSetName] = useState('Your Name')
    const onUpdate = () => {
        console.log('Your Name is', text)
        Alert.alert(`Your Name is ${text}`)
        onSetName('')
    }
    return <View>
        <TextInput style={page.input} onChangeText={onSetName} value={text}
        />
        <Button onPress={onUpdate} title="Get Input" />
    </View>
}
const App = () => {

    return <View style={page.container}>
        <UserName />
    </View>
}
export default App;

//Common style
const page = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: 'pink'
    },
    input: {
        height: 40,
        margin: 12,
        borderWidth: 1,
        padding: 10,
        backgroundColor: 'white'
    },
    text: {
        fontSize: 30,
        color: '#000'
    }

})

.....................................................................................	
			 React Native Naviation
....................................................................................
			
How navigation works?

In a web browser, you can link to different pages using an anchor (<a>) tag. When the user clicks on a link, the URL is pushed to the browser history stack.

 When the user presses the back button, the browser pops the item from the top of the history stack, so the active page is now the previously visited page.

React Native doesn't have a built-in idea of a global history stack like a web browser does -- this is where React Navigation enters the story.

React Navigation's stack navigator provides a way for your app to transition between screens and manage navigation history.

If your app uses only one stack navigator then it is conceptually similar to how a web browser handles navigation state - your app pushes and pops items from the navigation stack as users interact with it, and this results in the user seeing different screens. 

A key difference between how this works in a web browser and in React Navigation is that React Navigation's stack navigator provides the gestures and animations that you would expect on Android and iOS when navigating between routes in the stack.

Core concepts in React Native Navigation:
.........................................

1.Screen
   =>It is a special component,which only display Userinterface, not having any logic      It acts container.
2.Component
   => It is component having biz logic and ui logic...


Setup React Navigation:

in case your project is in "React Native cli"
in case your project is in "Expo work flow"

Common for both projects:

npm install @react-navigation/native @react-navigation/native-stack

For Bare React Native project:

npm install react-native-screens react-native-safe-area-context


For Expo Managed Projects
npx expo install react-native-screens react-native-safe-area-context

React Navigation container or parent object is "Navigation Container".


...................................................................................
				Multi screen-Page
.................................................................................

Types of navigation:
1.screen to screen - stack navigation -  @react-navigation/stack
2.Tab - tab based navivation.  @react-navigation/bottom-tabs
3.Drawer -Drawer navigation.   @react-navigation/drawer


Stack Navigation:

Moving among screens: How to move from one screen to another screen?

StackNavigator : 
 Object used to navigate between screen.
 Stack Object used to  represent stack navigator.

import { createNativeStackNavigator } from "@react-navigation/native-stack";//create Stack Object
const Stack  = createNativeStackNavigator();
console.log(Stack)

Object {
  "Navigator": [Function StackNavigator],
  "Screen": [Function Screen],
}


1.createStackNavigator is a function that returns an object containing 2 properties: Screen and Navigator.
2.Both of them are React components used for configuring the navigator.
The Navigator should contain Screen elements as its children to define the configuration for routes.

3.NavigationContainer is a component which manages our navigation tree and contains the navigation state. This component must wrap all navigators structure. Usually, we'd render this component at the root of our app, which is usually the component exported from App.js.

import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import { StyleSheet, View, Text } from 'react-native'

//create Stack Object 
const Stack = createNativeStackNavigator();
console.log(Stack)

//Screens 
const HomeScreen = () => <View style={styles.container}>
    <Text style={{
        fontSize: 40,
    }}>Home Screen</Text>
</View>

const ProfileScreen = () => <View style={styles.container}>
    <Text style={{
        fontSize: 40,
    }}>Profile Screen</Text>
</View>

const App = props => {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen name="Home" component={HomeScreen} />
            <Stack.Screen name="Profile" component={ProfileScreen} />
        </Stack.Navigator>
    </NavigationContainer>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'lightblue',
        justifyContent: 'center',
        alignItems: 'center'
    }
})
..................................................................................
			   How to move between screens
..................................................................................

Navigating to a new screen​

Every Component receives information from the parent component as a prop.
When component is rendered via route,React Navigator injects an object called "Navigation" Object as prop to every Component


Props;
Object {
  "navigation": Object {
    "addListener": [Function addListener],
    "canGoBack": [Function canGoBack],
    "dispatch": [Function dispatch],
    "getId": [Function getId],
    "getParent": [Function getParent],
    "getState": [Function anonymous],
    "goBack": [Function anonymous],
    "isFocused": [Function isFocused],
    "navigate": [Function anonymous],
    "pop": [Function anonymous],
    "popToTop": [Function anonymous],
    "push": [Function anonymous],
    "removeListener": [Function removeListener],
    "replace": [Function anonymous],
    "reset": [Function anonymous],
    "setOptions": [Function setOptions],
    "setParams": [Function anonymous],
  },
  "route": Object {
    "key": "Home-V-z_dGCJfqcHgNXxzxRGK",
    "name": "Home",
    "params": undefined,
  },

import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import { StyleSheet, View, Text, Button, Alert } from 'react-native'

//create Stack Object 
const Stack = createNativeStackNavigator();

//Screens 
const HomeScreen = props => {
    const { navigation: { navigate } } = props
    const onMove = () => {
        //props.navigation.navigate('Profile')
        navigate('Profile')
    }
    return <View style={styles.container}>
        <Text style={{
            fontSize: 40,
        }}>Home Screen</Text>
        <Button title="Profile" onPress={onMove} />
    </View>
}
const ProfileScreen = (props) => <View style={styles.container}>
    <Text style={{
        fontSize: 40,
    }}>Profile Screen</Text>
</View>

const App = props => {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen name="Home" component={HomeScreen} />
            <Stack.Screen name="Profile" component={ProfileScreen} />
        </Stack.Navigator>
    </NavigationContainer>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'lightblue',
        justifyContent: 'center',
        alignItems: 'center'
    }
})
.....................................................................................
	 Passing Data from one screen to another Screen-Passing Parameters
....................................................................................

import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import { StyleSheet, View, Text, Button, Alert } from 'react-native'

//create Stack Object 
const Stack = createNativeStackNavigator();

//Screens 
const HomeScreen = props => {
    const { navigation: { navigate } } = props
    const onMove = () => {
        navigate('Profile', { id: 1, name: 'Subramaian', city: 'Coimbatore' })
    }
    return <View style={styles.container}>
        <Text style={{
            fontSize: 40,
        }}>Home Screen</Text>
        <Button title="Profile" onPress={onMove} />
    </View>
}
const ProfileScreen = props => <View style={styles.container}>
    <Text style={{
        fontSize: 40,
    }}>Profile Screen</Text>
    <View>
        <Text>Id : {props.route.params.id}</Text>
        <Text>Name : {props.route.params.name}</Text>
        <Text>City: {props.route.params.city}</Text>

    </View>
</View>

const App = props => {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen name="Home" component={HomeScreen} />
            <Stack.Screen name="Profile" component={ProfileScreen} />
        </Stack.Navigator>
    </NavigationContainer>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'lightblue',
        justifyContent: 'center',
        alignItems: 'center'
    }
})
....................................................................................
		 Master Details Page -Webservice integration
....................................................................................

import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import { StyleSheet, View, Text, Button, TouchableHighlight, FlatList, ActivityIndicator } from 'react-native'
import { useState, useEffect } from "react";

//create Stack Object 
const Stack = createNativeStackNavigator();

const Error = props => {
    return <>
        <Text>{props.error}</Text>
    </>
}
const Spinner = props => {
    return <View style={{ justifyContent: 'center', alignItems: 'center', flex: 1 }}>
        <ActivityIndicator size='large' color="#0000ff" />
    </View>
}

const Posts = props => {
    let initalState = {
        isLoaded: false,
        items: [],
        error: null
    }
    const [posts, setPosts] = useState(initalState)

    console.log('Posts props')
    console.log(props)

    async function fetchPosts() {
        try {
            const url = 'https://jsonplaceholder.typicode.com/posts'
            const values = await (await fetch(url)).json()
            setPosts({ ...posts, isLoaded: true, items: posts.items.concat(values) })
        }
        catch (err) {
            setPosts({ ...posts, isLoaded: true, error: err })
        }
    }
    //useEffect : ComponentDidMount 
    useEffect(() => {
        setTimeout(() => {
            fetchPosts()
        }, 5000)
    }, [])

    const onSelect = (item) => {
        props.navigation.navigate('PostsDetails', item)
    }

    const { error, isLoaded, items } = posts
    if (error) {
        return <Error error={error} />
    } else if (!isLoaded) {
        return <Spinner />
    } else {
        return <FlatList
            data={items}
            keyExtractor={item => item.id}
            renderItem={({ item }) => {
                return <TouchableHighlight activeOpacity={0.4} underlayColor='yellow' onPress={() => { onSelect(item) }} >
                    <View>
                        <Text style={styles.item}>{item.title}</Text>
                    </View>
                </TouchableHighlight>
            }}
        />
    }

}


//Screens 
const HomeScreen = props => {
    const { navigation: { navigate } } = props
    const onMove = () => {
        navigate('Posts')
    }
    return <View style={styles.container}>
        <Text style={{
            fontSize: 40,
        }}>Home Screen</Text>
        <Button title="Posts" onPress={onMove} />
    </View>
}

const PostScreen = props => {
    return <>
        <Posts navigation={props.navigation} />
    </>
}

const PostsDetailScreen = props => {

    const { title, body } = props.route.params

    return <View style={styles.container}>
        <Text style={{ fontSize: 25, color: 'blue' }}>{title}</Text>
        <Text style={{ fontSize: 20, color: 'red' }}>{body}</Text>
    </View>
}

const App = props => {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen name="Home" component={HomeScreen} />
            <Stack.Screen name="Posts" component={PostScreen} />
            <Stack.Screen name="PostsDetails" component={PostsDetailScreen} />
        </Stack.Navigator>
    </NavigationContainer>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'lightblue',
        justifyContent: 'center',
        alignItems: 'center'
    },
    item: {
        padding: 10,
        fontSize: 18,
        height: 44,
        fontWeight: 'bold',
        color: '#000'

    },
    text: {
        fontSize: 30,
        textAlign: 'center',
        color: '#000'
    }
})
.
....................................................................................
.....................................................................................					Configuring the Header Bar
....................................................................................

Header Title:
 By default header title is name of the Route


 <Stack.Screen name="Home" component={Home} />

How to override the default Header title?

   <Stack.Screen options={{title:'My Personal Diary'}} name="Home" component={Home} />

How to update header dynamically based on some props?

<Stack.Screen name="Profile" options={(navigation)=>{
   return {
	title:navigation.route.params.name || 'Your Header'
   }
}} component={Profile} />

....................................................................................
....................................................................................
				Header styles
....................................................................................


There are three key properties to use when customizing the style of your header: headerStyle, headerTintColor, and headerTitleStyle.

headerStyle: a style object that will be applied to the View that wraps the header. If you set backgroundColor on it, that will be the color of your header.

headerTintColor: the back button and title both use this property as their color.

headerTitleStyle: if we want to customize the fontFamily, fontWeight and other Text 
Style properties for the title, we can use this to do it.

import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import { StyleSheet, View, Text, Button, TouchableHighlight, FlatList, Alert, ActivityIndicator } from 'react-native'
import { useState, useEffect } from "react";

//create Stack Object 
const Stack = createNativeStackNavigator();

const Error = props => {
    return <>
        <Text>{props.error}</Text>
    </>
}
const Spinner = props => {
    return <View style={{ justifyContent: 'center', alignItems: 'center', flex: 1 }}>
        <ActivityIndicator size='large' color="#0000ff" />
    </View>
}

const Posts = props => {
    let initalState = {
        isLoaded: false,
        items: [],
        error: null
    }
    const [posts, setPosts] = useState(initalState)

    console.log('Posts props')
    console.log(props)

    async function fetchPosts() {
        try {
            const url = 'https://jsonplaceholder.typicode.com/posts'
            const values = await (await fetch(url)).json()
            setPosts({ ...posts, isLoaded: true, items: posts.items.concat(values) })
        }
        catch (err) {
            setPosts({ ...posts, isLoaded: true, error: err })
        }
    }
    //useEffect : ComponentDidMount 
    useEffect(() => {
        setTimeout(() => {
            fetchPosts()
        }, 5000)
    }, [])

    const onSelect = (item) => {
        props.navigation.navigate('PostsDetails', item)
    }

    const { error, isLoaded, items } = posts
    if (error) {
        return <Error error={error} />
    } else if (!isLoaded) {
        return <Spinner />
    } else {
        return <FlatList
            data={items}
            keyExtractor={item => item.id}
            renderItem={({ item }) => {
                return <TouchableHighlight activeOpacity={0.4} underlayColor='yellow' onPress={() => { onSelect(item) }} >
                    <View>
                        <Text style={styles.item}>{item.title}</Text>
                    </View>
                </TouchableHighlight>
            }}
        />
    }

}


//Screens 
const HomeScreen = props => {
    const { navigation: { navigate } } = props
    const onMove = () => {
        navigate('Posts')
    }
    return <View style={styles.container}>
        <Text style={{
            fontSize: 40,
        }}>Home Screen</Text>
        <Button title="Posts" onPress={onMove} />
    </View>
}

const PostScreen = props => {
    return <>
        <Posts navigation={props.navigation} />
    </>
}

const PostsDetailScreen = props => {

    const { title, body } = props.route.params

    return <View style={styles.container}>
        <Text style={{ fontSize: 25, color: 'blue' }}>{title}</Text>
        <Text style={{ fontSize: 20, color: 'red' }}>{body}</Text>
    </View>
}

const App = props => {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen name="Home" component={HomeScreen} />
            <Stack.Screen options={(navigation) => {
                return {
                    title: 'My Posts',
                    headerRight: () => {
                        return <Button title="Info" onPress={() => {
                            Alert.alert('Info')
                        }} />
                    }
                }
            }}

                name="Posts" component={PostScreen} />


            <Stack.Screen name="PostsDetails" options={(navigation) => {
                return {
                    title: `${navigation.route.params.id} details`,
                    headerStyle: {
                        backgroundColor: 'pink'
                    },
                    headerTintColor: 'blue',
                    headerTitleStyle: {
                        fontWeight: 'bold',
                        fontFamily: 'fantasy'
                    }
                }
            }} component={PostsDetailScreen} />
        </Stack.Navigator>
    </NavigationContainer>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'lightblue',
        justifyContent: 'center',
        alignItems: 'center'
    },
    item: {
        padding: 10,
        fontSize: 18,
        height: 44,
        fontWeight: 'bold',
        color: '#000'

    },
    text: {
        fontSize: 30,
        textAlign: 'center',
        color: '#000'
    }
})
.....................................................................................
			 Header Buttons
.....................................................................................

import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import { StyleSheet, View, Text, Button, TouchableHighlight, FlatList, ActivityIndicator, Alert } from 'react-native'
import { useState, useEffect } from "react";


//create Stack Object
const Stack = createNativeStackNavigator();


const Error = props => {
    return <>
        <Text>{props.error}</Text>
    </>
}
const Spinner = props => {
    return <View style={{ justifyContent: 'center', alignItems: 'center', flex: 1 }}>
        <ActivityIndicator size='large' color="#0000ff" />
    </View>
}
const Posts = props => {
    let initalState = {
        isLoaded: false,
        items: [],
        error: null
    }
    const [posts, setPosts] = useState(initalState)

    console.log('Posts props')
    console.log(props)

    async function fetchPosts() {
        try {
            const url = 'https://jsonplaceholder.typicode.com/posts'
            const values = await (await fetch(url)).json()
            setPosts({ ...posts, isLoaded: true, items: posts.items.concat(values) })
        }
        catch (err) {
            setPosts({ ...posts, isLoaded: true, error: err })
        }
    }
    //useEffect : ComponentDidMount 
    useEffect(() => {
        setTimeout(() => {
            fetchPosts()
        }, 5000)
    }, [])

    const onSelect = (item) => {
        props.navigation.navigate('PostsDetails', item)
    }

    const { error, isLoaded, items } = posts
    if (error) {
        return <Error error={error} />
    } else if (!isLoaded) {
        return <Spinner />
    } else {
        return <FlatList
            data={items}
            keyExtractor={item => item.id}
            renderItem={({ item }) => {
                return <TouchableHighlight activeOpacity={0.4} underlayColor='yellow' onPress={() => { onSelect(item) }} >
                    <View>
                        <Text style={styles.item}>{item.title}</Text>
                    </View>
                </TouchableHighlight>
            }}
        />
    }

}




//Screens 
const HomeScreen = props => {
    // const { navigation: { navigate } } = props
    // const onMove = () => {
    //     navigate('Posts')
    // }
    return <View style={styles.container}>
        <Text style={{
            fontSize: 40,
        }}>Home Screen</Text>
        {/* <Button title="Posts" onPress={onMove} /> */}
    </View>
}
const PostScreen = props => {
    return <>
        <Posts navigation={props.navigation} />
    </>
}

const PostsDetailScreen = props => {

    const { title, body } = props.route.params

    return <View style={styles.container}>
        <Text style={{ fontSize: 25, color: 'blue' }}>{title}</Text>
        <Text style={{ fontSize: 20, color: 'red' }}>{body}</Text>
    </View>
}



const App = props => {
    return <NavigationContainer>
        <Stack.Navigator screenOptions={{
            headerStyle: {
                backgroundColor: '#f4511e'
            },
            headerTintColor: 'blue',
            headerTitleStyle: {
                fontWeight: 'bold'
            }
        }}>
            <Stack.Screen options={(navigation) => {
                console.log('inside navigation')
                console.log(navigation)
                const onMove = () => {
                    Alert.alert('clicked')
                }
                return {
                    title: 'My Posts App',
                    headerRight: () => {
                        return <Button title="Posts" onPress={onMove} />
                    }
                }
            }} name="Home" component={HomeScreen} />
            <Stack.Screen name="Posts" component={PostScreen} />
            <Stack.Screen options={(navigation) => {
                return {
                    title: navigation.route.params.title || 'Your Blog',
                    headerTintColor: 'blue',
                    headerTitleStyle: {
                        fontWeight: 'bold'
                    }
                }
            }} name="PostsDetails" component={PostsDetailScreen} />
        </Stack.Navigator>
    </NavigationContainer>
}


export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'lightblue',
        justifyContent: 'center',
        alignItems: 'center'
    },
    item: {
        padding: 10,
        fontSize: 18,
        height: 44,
        fontWeight: 'bold',
        color: '#000'

    },
    text: {
        fontSize: 30,
        textAlign: 'center',
        color: '#000'
    }
})



....................................................................................
			  Tab Navigation
...................................................................................

Tab Naviation:

Types of Tabs
1.TopTab
2.BottomTab
3.MaterialBottomTab | MaterialTopTab

npm i @react-navigation/material-top-tabs
npm i @react-navigation/bottom-tabs
npm i @react-navigation/material-bottom-tabs
npm i react-native-pager-view


Material Top tab Navigation:
import { NavigationContainer } from "@react-navigation/native";
import { View, StyleSheet, Text } from 'react-native'
import { createMaterialTopTabNavigator } from "@react-navigation/material-top-tabs";

const Tab = createMaterialTopTabNavigator();

const FeedScreen = () => {
    return <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>FeedScreen</Text>
    </View>
}
const NotificationsScreen = () => {
    return <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>NotificationsScreen</Text>
    </View>
}
const ProfileScreen = () => {
    return <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>ProfileScreen</Text>
    </View>
}
function MyTabs() {
    return <Tab.Navigator initialRouteName="Feed" screenOptions={{
        tabBarActiveTintColor: '#e91e63',
        tabBarLabelStyle: {
            fontSize: 12,
            fontWeight: 'bold',
        },
        tabBarStyle: {
            backgroundColor: 'powderblue'
        }
    }}>
        <Tab.Screen name="Feed" component={FeedScreen} />
        <Tab.Screen name="Notifications" component={NotificationsScreen} />
        <Tab.Screen name="Profile" component={ProfileScreen} />
    </Tab.Navigator>
}

function App() {
    return <NavigationContainer>
        <MyTabs />
    </NavigationContainer>
}

export default App;


Material Bottom Tab Navigation:
................................

npm install @react-navigation/material-bottom-tabs react-native-paper react-native-vector-icons
import { NavigationContainer } from "@react-navigation/native";
import { View, Text } from 'react-native'
import { createMaterialBottomTabNavigator } from 'react-native-paper/react-navigation';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';

const Tab = createMaterialBottomTabNavigator();

const FeedScreen = () => {
    return <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>FeedScreen</Text>
    </View>
}
const NotificationsScreen = () => {
    return <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>NotificationsScreen</Text>
    </View>
}
const ProfileScreen = () => {
    return <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>ProfileScreen</Text>
    </View>
}

function MyTabs() {
    return (
        <Tab.Navigator>
            <Tab.Screen name="Feed" component={FeedScreen} options={{
                tabBarLabel: 'Feed',
                tabBarIcon: ({ color }) => (
                    <MaterialCommunityIcons name="home" color={color} size={26} />
                ),
            }} />
            <Tab.Screen name="Notification" component={NotificationsScreen} />
            <Tab.Screen name="Profiles" component={ProfileScreen} />
        </Tab.Navigator>
    );
}


function App() {
    return <SafeAreaProvider>
        <NavigationContainer>
            <MyTabs />
        </NavigationContainer>
    </SafeAreaProvider>
}

export default App;

Tab + Stack

Tab:
import { NavigationContainer } from "@react-navigation/native";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
import { View, StyleSheet, Text } from 'react-native'

//create tab:
const Tab = createBottomTabNavigator();

//screens
const SettingsScreen = () => {
    return <View style={styles.container}>
        <Text style={styles.item}>Settings</Text>
    </View>
}
const HomeScreen = () => {
    return <View style={styles.container}>
        <Text style={styles.item}>Home</Text>
    </View>
}
const App = () => {
    return <NavigationContainer>
        <Tab.Navigator>
            <Tab.Screen name="Settings" component={SettingsScreen} />
            <Tab.Screen name="Home" component={HomeScreen} />
        </Tab.Navigator>
    </NavigationContainer>

}

export default App;
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'lightblue',
        justifyContent: 'center',
        alignItems: 'center'
    },
    item: {
        padding: 10,
        fontSize: 18,
        height: 44,
        fontWeight: 'bold',
        color: '#000'

    },
    text: {
        fontSize: 30,
        textAlign: 'center',
        color: '#000'
    }
})
...........

Tab +Stack:
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { View, Text, StyleSheet, Button } from 'react-native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';


//create Stack Object
const Tab = createBottomTabNavigator();
const Stack = createNativeStackNavigator();

const Home = props => {
    return <Tab.Navigator>
        <Tab.Screen name="Messages" component={Messages} />
        <Tab.Screen name="Feed" component={Feed} />
    </Tab.Navigator>
}
const Messages = props => {
    const { navigation } = props;
    return <View style={styles.container}>
        <Text>Messages Screen</Text>
        <Button title="go to Settions" onPress={() => {
            navigation.navigate('Settings')
        }} />
    </View>
}

const Feed = props => {
    return <View style={styles.container}>
        <Text>Feed Screen</Text>
    </View>
}
const Settings = props => {
    return <View style={styles.container}>
        <Text>Settings Screen</Text>
    </View>
}

function App() {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen
                name="Home"
                component={Home}
                options={{ headerShown: false }}
            />
            <Stack.Screen name="Settings" component={Settings} />
        </Stack.Navigator>
    </NavigationContainer>

}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    },
});
..................................................................................
				Drawer Navigation
..................................................................................				     Drawer
.....................................................................................

Steps to install drawer dependency:
....................................

1.install dependency:

npm install @react-navigation/drawer
npm install react-native-gesture-handler react-native-reanimated

2.plugin configuration in babel.config.js

module.exports = {
  presets: ['module:metro-react-native-babel-preset'],
  plugins: ['react-native-reanimated/plugin'],
};

3.reAnimation configuration 
Follow this url
https://docs.swmansion.com/react-native-reanimated

After adding the react-native-reanimated/plugin to your project you may encounter a false-positive "Reanimated 2 failed to create a worklet" error. In most cases, this can be fixed by cleaning the application's cache. Depending on your workflow or favorite package manager that could be done by:

yarn start --reset-cache
npm start --reset-cache
expo start -c
or other.

This step has to be down after writing code.

import 'react-native-gesture-handler';
import { NavigationContainer } from '@react-navigation/native';
import { View, Text, StyleSheet, Button } from 'react-native';
import { createDrawerNavigator } from '@react-navigation/drawer';


//Create Drawer
const Drawer = createDrawerNavigator();

//screens

const Feed = () => <Text>Feed</Text>
const Article = () => <Text>Article</Text>

function App() {
    return <NavigationContainer>
        <Drawer.Navigator>
            <Drawer.Screen name="Feed" component={Feed} />
            <Drawer.Screen name="Article" component={Article} />
        </Drawer.Navigator>
    </NavigationContainer>

}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    },
});

export default App

Note:
import 'react-native-gesture-handler';
  It must be top of the code always.
